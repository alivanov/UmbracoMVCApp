<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Umbraco.Core</name>
    </assembly>
    <members>
        <member name="T:Umbraco.Core.ActivatorHelper">
            <summary>
            Helper methods for Activation
            </summary>
        </member>
        <member name="M:Umbraco.Core.ActivatorHelper.CreateInstance``1">
            <summary>
            Creates an instance of a type using that type's default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.ApplicationContext">
            <summary>
            the Umbraco Application context
            </summary>
            <remarks>
            one per AppDomain, represents the global Umbraco application
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Constructor
            </summary>        
        </member>
        <member name="M:Umbraco.Core.ApplicationContext.#ctor">
            <summary>
            Empty constructor normally reserved for unit tests when a DatabaseContext or a ServiceContext is not
            necessarily required or needs to be set after construction.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.Current">
            <summary>
            Singleton accessor
            </summary>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.ApplicationCache">
            <summary>
            Returns the application wide cache accessor
            </summary>
            <remarks>
            Any caching that is done in the application (app wide) should be done through this property
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.OriginalRequestUrl">
            <summary>
            The original/first url that the web application executes
            </summary>
            <remarks>
            we need to set the initial url in our ApplicationContext, this is so our keep alive service works and this must
            exist on a global context because the keep alive service doesn't run in a web context.
            we are NOT going to put a lock on this because locking will slow down the application and we don't really care
            if two threads write to this at the exact same time during first page hit.
            see: http://issues.umbraco.org/issue/U4-2059
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.DatabaseContext">
            <summary>
            Gets the current DatabaseContext
            </summary>
            <remarks>
            Internal set is generally only used for unit tests
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ApplicationContext.Services">
            <summary>
            Gets the current ServiceContext
            </summary>
            <remarks>
            Internal set is generally only used for unit tests
            </remarks>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.Assembly)">
            <summary>
            Returns the file used to load the assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.AssemblyExtensions.GetAssemblyFile(System.Reflection.AssemblyName)">
            <summary>
             Returns the file used to load the assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Attempt`1">
            <summary>
            Represents the result of an operation attempt
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="F:Umbraco.Core.Attempt`1.False">
            <summary>
            Represents an unsuccessful parse operation
            </summary>
        </member>
        <member name="M:Umbraco.Core.Attempt`1.#ctor(System.Boolean,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Attempt`1"/> struct.
            </summary>
            <param name="success">If set to <c>true</c> this tuple represents a successful parse result.</param>
            <param name="result">The parse result.</param>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Success">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Core.Attempt`1"/> represents a successful operation.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Error">
            <summary>
            Gets the error associated with an unsuccessful attempt.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Umbraco.Core.Attempt`1.Result">
            <summary>
            Gets the parse result.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.Auditing.AuditTrail">
            <summary>
            Represents the Audit implementation
            </summary>
        </member>
        <member name="T:Umbraco.Core.Auditing.Audit">
            <summary>
            Public method to create new audit trail
            </summary>
        </member>
        <member name="T:Umbraco.Core.Auditing.AuditTypes">
            <summary>
            Enums for vailable types of auditing
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.New">
            <summary>
            Used when new nodes are added
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Save">
            <summary>
            Used when nodes are saved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Open">
            <summary>
            Used when nodes are opened
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Delete">
            <summary>
            Used when nodes are deleted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Publish">
            <summary>
            Used when nodes are published
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.SendToPublish">
            <summary>
            Used when nodes are send to publishing
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.UnPublish">
            <summary>
            Used when nodes are unpublished
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Move">
            <summary>
            Used when nodes are moved
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Copy">
            <summary>
            Used when nodes are copied
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.AssignDomain">
            <summary>
            Used when nodes are ass√≠gned a domain
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PublicAccess">
            <summary>
            Used when public access are changed for a node
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Sort">
            <summary>
            Used when nodes are sorted
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Notify">
            <summary>
            Used when a notification are send to a user
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.System">
            <summary>
            General system notification
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.RollBack">
            <summary>
            Used when a node's content is rolled back to a previous version
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PackagerInstall">
            <summary>
            Used when a package is installed
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.PackagerUninstall">
            <summary>
            Used when a package is uninstalled
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.SendToTranslate">
            <summary>
            Used when a node is send to translation
            </summary>
        </member>
        <member name="F:Umbraco.Core.Auditing.AuditTypes.Custom">
            <summary>
            Use this log action for custom log messages that should be shown in the audit trail
            </summary>
        </member>
        <member name="M:Umbraco.Core.Auditing.IAuditWriteProvider.WriteEntry(System.Int32,System.Int32,System.DateTime,System.String,System.String)">
            <summary>
            Writes an audit entry to the underlaying datastore.
            </summary>
            <param name="objectId">Id of the object (Content, ContentType, Media, etc.)</param>
            <param name="userId">Id of the user</param>
            <param name="date">Datestamp</param>
            <param name="header">Audit header</param>
            <param name="comment">Audit comment</param>
        </member>
        <member name="M:Umbraco.Core.Auditing.DataAuditWriteProvider.WriteEntry(System.Int32,System.Int32,System.DateTime,System.String,System.String)">
            <summary>
            Writes an audit entry to the underlaying datastore.
            </summary>
            <param name="objectId">Id of the object (Content, ContentType, Media, etc.)</param>
            <param name="userId">Id of the user</param>
            <param name="date">Datestamp</param>
            <param name="header">Audit header</param>
            <param name="comment">Audit comment</param>
        </member>
        <member name="T:Umbraco.Core.CacheHelper">
            <summary>
            Class that is exposed by the ApplicationContext for application wide caching purposes
            </summary>
            <remarks>
            This class may be opened publicly at some point but needs a review of what is absoletely necessary.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearAllCache">
            <summary>
            Clears everything in umbraco's runtime cache, which means that not only
            umbraco content is removed, but also other cache items from pages running in
            the same application / website. Use with care :-)
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheItem(System.String)">
            <summary>
            Clears the item in umbraco's runtime cache with the given key 
            </summary>
            <param name="key">Key</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheObjectTypes(System.String)">
            <summary>
            Clears all objects in the System.Web.Cache with the System.Type name as the
            input parameter. (using [object].GetType())
            </summary>
            <param name="typeName">The name of the System.Type which should be cleared from cache ex "System.Xml.XmlDocument"</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.ClearCacheByKeySearch(System.String)">
            <summary>
            Clears all cache items that starts with the key passed.
            </summary>
            <param name="keyStartsWith">The start of the key</param>
        </member>
        <member name="M:Umbraco.Core.CacheHelper.GetCacheItem``1(System.String,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheDependency,System.TimeSpan,System.Func{``0},System.Object)">
            <summary>
            This is used only for legacy purposes as I did not want to change all of the locking to one lock found on this object, 
            however, the reason this is used for legacy purposes is because I see zero reason to use different sync locks, just the one
            lock (Locker) on this class should be sufficient.
            </summary>
            <typeparam name="TT"></typeparam>
            <param name="cacheKey"></param>
            <param name="priority"></param>
            <param name="refreshAction"></param>
            <param name="cacheDependency"></param>
            <param name="timeout"></param>
            <param name="getCacheItem"></param>
            <param name="syncLock"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute">
            <summary>
            Marks the program elements that Umbraco will obsolete.
            </summary>
            <remarks>
            Indicates that Umbraco will obsolete the program element at some point in the future, but we do not want to
            explicitely mark it [Obsolete] yet to avoid warning messages showing when developers compile Umbraco.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoWillObsoleteAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute">
            <summary>
            Marks the program elements that Umbraco is experimenting with and could become public.
            </summary>
            <remarks>
            <para>Indicates that Umbraco  is experimenting with code that potentially could become
            public, but we're not sure, and the code is not stable and can be refactored at any time.</para>
            <para>The issue tracker should contain more details, discussion, and planning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoExperimentalFeatureAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute">
            <summary>
            Marks the program elements that Umbraco is considering making public.
            </summary>
            <remarks>
            <para>Indicates that Umbraco considers making the (currently internal) program element public
            at some point in the future, but the decision is not fully made yet and is still pending reviews.</para>
            <para>Note that it is not a commitment to make the program element public. It may not ever become public.</para>
            <para>The issue tracker should contain more details, discussion, and planning.</para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute"/> class with a description.
            </summary>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.CodeAnnotations.UmbracoProposedPublicAttribute"/> class with a tracker url and a description.
            </summary>
            <param name="trackerUrl">The url of a tracker issue containing more details, discussion, and planning.</param>
            <param name="description">The text string that describes what is intended.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.ClientDependencyConfiguration.IncreaseVersionNumber">
            <summary>
            Increases the version number in ClientDependency.config by 1
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.Current">
            <summary>
            Gets the current version of Umbraco.
            Version class with the specified major, minor, build (Patch), and revision numbers.
            </summary>
            <remarks>
            CURRENT UMBRACO VERSION ID.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoVersion.CurrentComment">
            <summary>
            Gets the version comment (like beta or RC).
            </summary>
            <value>The version comment.</value>
        </member>
        <member name="T:Umbraco.Core.CoreBootManager">
            <summary>
            A bootstrapper for the Umbraco application which initializes all objects for the Core of the application 
            </summary>
            <remarks>
            This does not provide any startup functionality relating to web objects
            </remarks>
        </member>
        <member name="T:Umbraco.Core.IBootManager">
            <summary>
             A bootstrapper interface for the Umbraco application
            </summary>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Initialize">
            <summary>
            Fires first in the application startup process before any customizations can occur
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Startup(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after initialization and calls the callback to allow for customizations to occur
            </summary>
            <param name="afterStartup"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IBootManager.Complete(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.CreateApplicationContext(Umbraco.Core.DatabaseContext,Umbraco.Core.Services.ServiceContext)">
            <summary>
            Creates and assigns the application context singleton
            </summary>
            <param name="dbContext"></param>
            <param name="serviceContext"></param>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeApplicationEventsResolver">
            <summary>
            Special method to initialize the ApplicationEventsResolver and any modifications required for it such 
            as adding custom types to the resolver.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.CoreBootManager.Startup(System.Action{Umbraco.Core.ApplicationContext})" -->
        <member name="M:Umbraco.Core.CoreBootManager.Complete(System.Action{Umbraco.Core.ApplicationContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.FreezeResolution">
            <summary>
            Freeze resolution to not allow Resolvers to be modified
            </summary>
        </member>
        <member name="M:Umbraco.Core.CoreBootManager.InitializeResolvers">
            <summary>
            Create the resolvers
            </summary>
        </member>
        <member name="T:Umbraco.Core.DatabaseContext">
            <summary>
            The Umbraco Database context
            </summary>
            <remarks>
            One per AppDomain, represents the Umbraco database
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureEmbeddedDatabaseConnection">
            <summary>
            Configure a ConnectionString for the embedded database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureDatabaseConnection(System.String)">
            <summary>
            Configure a ConnectionString that has been entered manually.
            </summary>
            <remarks>
            Please note that we currently assume that the 'System.Data.SqlClient' provider can be used.
            </remarks>
            <param name="connectionString"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.ConfigureDatabaseConnection(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures a ConnectionString for the Umbraco database based on the passed in properties from the installer.
            </summary>
            <param name="server">Name or address of the database server</param>
            <param name="databaseName">Name of the database</param>
            <param name="user">Database Username</param>
            <param name="password">Database Password</param>
            <param name="databaseProvider">Type of the provider to be used (Sql, Sql Azure, Sql Ce, MySql)</param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.SaveConnectionString(System.String,System.String)">
            <summary>
            Saves the connection string as a proper .net ConnectionString and the legacy AppSettings key/value.
            </summary>
            <remarks>
            Saves the ConnectionString in the very nasty 'medium trust'-supportive way.
            </remarks>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:Umbraco.Core.DatabaseContext.Initialize">
            <summary>
            Internal method to initialize the database configuration.
            </summary>
            <remarks>
            If an Umbraco connectionstring exists the database can be configured on app startup,
            but if its a new install the entry doesn't exist and the db cannot be configured.
            So for new installs the Initialize() method should be called after the connectionstring
            has been added to the web.config.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.Database">
            <summary>
            Gets the <see cref="P:Umbraco.Core.DatabaseContext.Database"/> object for doing CRUD operations
            against custom tables that resides in the Umbraco database.
            </summary>
            <remarks>
            This should not be used for CRUD operations or queries against the
            standard Umbraco tables! Use the Public services for that.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.IsDatabaseConfigured">
            <summary>
            Boolean indicating whether the database has been configured
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.ConnectionString">
            <summary>
            Gets the configured umbraco db connection string.
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.ProviderName">
            <summary>
            Returns the name of the dataprovider from the connectionstring setting in config
            </summary>
        </member>
        <member name="P:Umbraco.Core.DatabaseContext.DatabaseProvider">
            <summary>
            Returns the Type of DatabaseProvider used
            </summary>
        </member>
        <member name="T:Umbraco.Core.DataTableExtensions">
            <summary>
            Static and extension methods for the DataTable object
            </summary>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.GenerateDataTable(System.String,System.Func{System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Func{System.Collections.Generic.IEnumerable{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}}})">
            <summary>
            Creates a DataTable with the specified alias and columns and uses a callback to populate the headers.
            </summary>
            <param name="tableAlias"></param>
            <param name="getHeaders"></param>
            <param name="rowData"> </param>
            <returns></returns>
            <remarks>
            This has been migrated from the Node class and uses proper locking now. It is now used by the Node class and the 
            DynamicPublishedContent extensions for legacy reasons.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.CreateTableData">
            <summary>
            Helper method to return this ugly object
            </summary>
            <returns></returns>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DataTableExtensions.AddRowData(System.Collections.Generic.List{System.Tuple{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper method to deal with these ugly objects
            </summary>
            <param name="rowData"></param>
            <param name="standardVals"></param>
            <param name="userVals"></param>
            <remarks>
            This is for legacy code, I didn't want to go creating custom classes for these
            </remarks>
        </member>
        <member name="T:Umbraco.Core.DictionaryExtensions">
            <summary>
             Extension methods for dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary)">
            <summary>
            Converts a dictionary to another type by only using direct casting
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ConvertTo``2(System.Collections.IDictionary,System.Func{System.Object,``0},System.Func{System.Object,``1})">
            <summary>
            Converts a dictionary to another type using the specified converters
            </summary>
            <typeparam name="TKeyOut"></typeparam>
            <typeparam name="TValOut"></typeparam>
            <param name="d"></param>
            <param name="keyConverter"></param>
            <param name="valConverter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ToNameValueCollection(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Converts a dictionary to a NameValueCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ToFormCollection(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts a dictionary to a FormCollection
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.MergeLeft``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
            <summary>
            Returns a new dictionary of this ... others merged leftward.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TK"></typeparam>
            <typeparam name="TV"></typeparam>
            <param name="me"></param>
            <param name="others"></param>
            <returns></returns>
            <remarks>
            Reference: http://stackoverflow.com/questions/294138/merging-dictionaries-in-c
            </remarks>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Returns the value of the key value based on the key, if the key is not found, a null value is returned
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TVal">The type of the val.</typeparam>
            <param name="d">The d.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetValueAsString``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Returns the value of the key value based on the key as it's string value, if the key is not found, then an empty string is returned
            </summary>
            <param name="d"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.ContainsKeyIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>contains key ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">Value Type</typeparam>
            <returns>The contains key ignore case.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Umbraco.Core.DictionaryExtensions.ToQueryString(System.Collections.Generic.IDictionary{System.String,System.Object})" -->
        <member name="M:Umbraco.Core.DictionaryExtensions.GetEntryIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="M:Umbraco.Core.DictionaryExtensions.GetEntryIgnoreCase``1(System.Collections.Generic.IDictionary{System.String,``0},System.String,``0)">
            <summary>The get entry ignore case.</summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <typeparam name="TValue">The type</typeparam>
            <returns>The entry</returns>
        </member>
        <member name="T:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver">
            <summary>
            Resolves the current CultureDictionaryFactory
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2">
            <summary>
            A Resolver to return and set a Single registered object.
            </summary>
            <typeparam name="TResolved"></typeparam>
            <typeparam name="TResolver"> </typeparam>
            <remarks>
            Used for 'singly' registered objects. An example is like the MVC Controller Factory, only one exists application wide and it can
            be get/set.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ResolverBase`1">
            <summary>
            base class for resolvers which declare a singleton accessor
            </summary>
            <typeparam name="TResolver"></typeparam>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.ResolverBase`1.ResolversLock">
            <summary>
            The lock for the singleton
            </summary>
            <remarks>
            Though resharper says this is in error, it is actually correct. We want a different lock object for each generic type.
            See this for details: http://confluence.jetbrains.net/display/ReSharper/Static+field+in+generic+type
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ResolverBase`1.Reset">
            <summary>
            used in unit tests to reset current to null
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.SingleObjectResolverBase`2.Value">
            <summary>
            Gets/sets the value of the object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver.SetContentStore(Umbraco.Core.Dictionary.ICultureDictionaryFactory)">
            <summary>
            Can be used by developers at runtime to set their ICultureDictionaryFactory at app startup
            </summary>
            <param name="factory"></param>
        </member>
        <member name="P:Umbraco.Core.Dictionary.CultureDictionaryFactoryResolver.Factory">
            <summary>
            Returns the ICultureDictionaryFactory
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.DynamicInstanceHelper">
            <summary>
            A helper class to try invoke members, find properties, etc...
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.TryInvokeMember``1(``0,System.Dynamic.InvokeMemberBinder,System.Object[])">
            <summary>
            Attempts to invoke a member based on the dynamic instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisObject">The object instance to invoke the extension method for</param>
            <param name="binder"></param>
            <param name="args"></param>
            <returns></returns>
            <remarks>
            First tries to find a property with the binder name, if that fails it will try to find a static or instance method
            on the object that matches the binder name
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.TryInvokeMember``1(``0,System.Dynamic.InvokeMemberBinder,System.Object[],System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Attempts to invoke a member based on the dynamic instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="thisObject">The object instance to invoke the extension method for</param>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="findExtensionMethodsOnTypes">The types to scan for extension methods </param>
            <returns></returns>
            <remarks>
            First tries to find a property with the binder name, if that fails it will try to find a static or instance method
            on the object that matches the binder name, if that fails it will then attempt to invoke an extension method
            based on the binder name and the extension method types to scan.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicInstanceHelper.FindAndExecuteExtensionMethod``1(``0,System.Object[],System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Attempts to find an extension method that matches the name and arguments based on scanning the Type's passed in
            to the findMethodsOnTypes parameter
            </summary>
            <param name="thisObject">The instance object to execute the extension method for</param>
            <param name="args"></param>
            <param name="name"></param>
            <param name="findMethodsOnTypes"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlString">
            <summary>
            Used to return the raw xml string value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXElement">
            <summary>
            Used to return the raw xml XElement value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlElement">
            <summary>
            Used to return the raw xml XElement value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.RawXmlDocument">
            <summary>
            Used to return the raw xml XmlDocument value from DynamicXml when using type converters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.DynamicXmlConverter">
            <summary>
            A custom type converter for DynamicXml
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableEventArgs">
            <summary>
            Event args for that can support cancellation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.CanCancel">
            <summary>
            Flag to determine if this instance will support being cancellable
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableEventArgs.Cancel">
            <summary>
            If this instance supports cancellation, this gets/sets the cancel value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.CancellableObjectEventArgs`1">
            <summary>
            Event args for a strongly typed object that can support cancellation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Umbraco.Core.Events.CancellableObjectEventArgs`1.EventObject">
            <summary>
            Returns the object relating to the event
            </summary>
            <remarks>
            This is protected so that inheritors can expose it with their own name
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Copy">
            <summary>
            The copied entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.Original">
            <summary>
            The original entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.CopyEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the objects new parent.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the delete operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.DeleteEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs`1.DeletedEntities">
            <summary>
            Returns all entities that were deleted during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteEventArgs.Id">
            <summary>
            Gets the Id of the object being deleted.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.DeleteRevisionsEventArgs.IsDeletingSpecificRevision">
            <summary>
            Returns true if we are deleting a specific revision
            </summary>
        </member>
        <member name="T:Umbraco.Core.Events.EventExtensions">
            <summary>
            Extension methods for cancellable event operations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.IsRaisedEventCancelled``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises the event and returns a boolean value indicating if the event was cancelled
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TArgs"></typeparam>
            <param name="eventHandler"></param>
            <param name="args"></param>
            <param name="sender"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Events.EventExtensions.RaiseEvent``2(Umbraco.Core.Events.TypedEventHandler{``0,``1},``1,``0)">
            <summary>
            Raises the event
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TArgs"></typeparam>
            <param name="eventHandler"></param>
            <param name="args"></param>
            <param name="sender"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.Migrations.IMigration},System.Version,System.Version,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="targetVersion"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.Migrations.IMigration},Umbraco.Core.Persistence.Migrations.MigrationContext,System.Version,System.Version,System.Boolean)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="migrationContext"></param>
            <param name="targetVersion"></param>
            <param name="canCancel"></param>
            <param name="configuredVersion"></param>
        </member>
        <member name="M:Umbraco.Core.Events.MigrationEventArgs.#ctor(System.Collections.Generic.IEnumerable{Umbraco.Core.Persistence.Migrations.IMigration},System.Version,System.Version)">
            <summary>
            Constructor accepting multiple migrations that are used in the migration runner
            </summary>
            <param name="eventObject"></param>
            <param name="configuredVersion"></param>
            <param name="targetVersion"></param>
        </member>
        <member name="P:Umbraco.Core.Events.MigrationEventArgs.Migrations">
            <summary>
            Returns all migrations that were used in the migration runner
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the publish operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.PublishEventArgs`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
            <param name="isAllPublished"></param>
        </member>
        <member name="P:Umbraco.Core.Events.PublishEventArgs`1.PublishedEntities">
            <summary>
            Returns all entities that were published during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.Entity">
            <summary>
            The entity being moved
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MoveEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the objects new parent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Entity">
            <summary>
            The entity being created
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Alias">
            <summary>
            Gets or Sets the Alias.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.ParentId">
            <summary>
            Gets or Sets the Id of the parent.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.NewEventArgs`1.Parent">
            <summary>
            Gets or Sets the parent IContent object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.RollbackEventArgs`1.Entity">
            <summary>
            The entity being rolledback
            </summary>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:Umbraco.Core.Events.SaveEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="P:Umbraco.Core.Events.SaveEventArgs`1.SavedEntities">
            <summary>
            Returns all entities that were saved during the operation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.SendToPublishEventArgs`1.Entity">
            <summary>
            The entity being sent to publish
            </summary>
        </member>
        <member name="T:Umbraco.Core.IApplicationEventHandler">
            <summary>
            Custom IApplicationStartupHandler that auto subscribes to the applications events
            </summary>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationInitialized(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            ApplicationContext is created and other static objects that require initialization have been setup
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationStarting(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            All resolvers have been initialized but resolution is not frozen so they can be modified in this method
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="M:Umbraco.Core.IApplicationEventHandler.OnApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            Bootup is completed, this allows you to perform any other bootup logic required for the application.
            Resolution is frozen so now they can be used to resolve instances.
            </summary>
            <param name="umbracoApplication"></param>
            <param name="applicationContext"></param>
        </member>
        <member name="T:Umbraco.Core.MacroPropertyTypeResolver">
            <summary>
            A resolver to return all <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects.
            </summary>
            <param name="scope">The lifetime scope of instantiated objects, default is per Application</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.Web.HttpContextBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an empty list of objects.
            with creation of objects based on an HttpRequest lifetime scope.
            </summary>
            <param name="httpContext"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an initial list of objects.
            </summary>
            <param name="value">The list of objects.</param>
            <param name="scope">If set to true will resolve singleton objects which will be created once for the lifetime of the application</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.#ctor(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2"/> class with an initial list of objects
            with creation of objects based on an HttpRequest lifetime scope.
            </summary>
            <param name="httpContext"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetSortedValues">
            <summary>
            If a resolver requries that objects are resolved with a specific order using the WeightedPluginAttribute
            then this method should be used instead of the Values property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.RemoveType(System.Type)">
            <summary>
            Removes a type.
            </summary>
            <param name="value">The type to remove.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.RemoveType``1">
            <summary>
            Removes a type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            protected method allow the inheritor to add many types at once
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddType(System.Type)">
            <summary>
            Adds a Type to the end of the list.
            </summary>
            <param name="value">The object to be added.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.AddType``1">
            <summary>
            Adds a Type to the end of the list.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType(System.Int32,System.Type)">
            <summary>
            Inserts a Type at the specified index.
            </summary>
            <param name="index">The zero-based index at which the object should be inserted.</param>
            <param name="value">The object to insert.</param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InsertType``1(System.Int32)">
            <summary>
            Inserts a Type at the specified index.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="index"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.GetWriteLock">
            <summary>
            Returns a WriteLock to use when modifying collections
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureResolutionNotFrozen">
            <summary>
            Throws an exception if resolution is frozen
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureRemoveSupport">
            <summary>
            Throws an exception if this does not support Remove
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureClearSupport">
            <summary>
            Throws an exception if this does not support Clear
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureAddSupport">
            <summary>
            Throws an exception if this does not support Add
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureInsertSupport">
            <summary>
            Throws an exception if this does not support insert
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.EnsureCorrectType(System.Type)">
            <summary>
            Throws an exception if the type is not of the TResolved type
            </summary>
            <param name="t"></param>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.CanResolveBeforeFrozen">
            <summary>
            used internally for special resolvers to be able to resolve objects before resolution is frozen.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.InstanceTypes">
            <summary>
            Returns the list of Types registered that instances will be created from
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.CurrentHttpContext">
            <summary>
            Returns the Current HttpContextBase used to construct this object if one exists. 
            If one exists then the LifetimeScope will be ObjectLifetimeScope.HttpRequest
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.LifetimeScope">
            <summary>
            Returns the ObjectLifetimeScope for created objects
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.DefaultPluginWeight">
            <summary>
            Used in conjunction with GetSortedValues and WeightedPluginAttribute, if any of the objects
            being resolved do not contain the WeightedPluginAttribute then this will be the default weight applied
            to the object.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ManyObjectsResolverBase`2.Values">
            <summary>
            Returns the list of new object instances.
            </summary>
        </member>
        <member name="M:Umbraco.Core.MacroPropertyTypeResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="macroPropertyTypes"></param>		
        </member>
        <member name="P:Umbraco.Core.MacroPropertyTypeResolver.MacroPropertyTypes">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Media.MediaSubfolderCounter">
            <summary>
            Internal singleton to handle the numbering of subfolders within the Media-folder.
            When this class is initiated it will look for numbered subfolders and select the highest number,
            which will be the start point for the naming of the next subfolders. If no subfolders exists
            then the starting point will be 1000, ie. /media/1000/koala.jpg
            </summary>
        </member>
        <member name="M:Umbraco.Core.Media.MediaSubfolderCounter.Increment">
            <summary>
            Returns an increment of the numbered media subfolders.
            </summary>
            <returns>A <see cref="T:System.Int64"/> value</returns>
        </member>
        <member name="T:Umbraco.Core.Models.ContentBase">
            <summary>
            Represents an abstract class for base Content properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.Entity">
            <summary>
            Base Abstract Entity
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IEntity">
            <summary>
            Defines an Entity.
            Entities should always have an Id, Created and Modified date
            </summary>
            <remarks>The current database schema doesn't provide a modified date
            for all entities, so this will have to be changed at a later stage.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.Id">
            <summary>
            The Id of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.Key">
            <summary>
            Guid based Id
            </summary>
            <remarks>The key is currectly used to store the Unique Id from the 
            umbracoNode table, which many of the entities are based on.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IEntity.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, eg. Id.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.ICanBeDirty">
            <summary>
            An interface that defines the object is tracking property changes and if it is Dirty
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.OnPropertyChanged(System.Reflection.PropertyInfo)">
            <summary>
            Method to call on a property setter.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.AddingEntity">
            <summary>
            Method to call on entity saved when first added
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.UpdatingEntity">
            <summary>
            Method to call on entity saved/updated
            </summary>
        </member>
        <member name="F:Umbraco.Core.Models.EntityBase.Entity._propertyChangedInfo">
            <summary>
            Tracks the properties that have changed
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.EntityBase.Entity.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.Id">
            <summary>
            Integer Id
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.Key">
            <summary>
            Guid based Id
            </summary>
            <remarks>The key is currectly used to store the Unique Id from the 
            umbracoNode table, which many of the entities are based on.</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.WasCancelled">
            <summary>
            Gets or sets the WasCancelled flag, which is used to track
            whether some action against an entity was cancelled through some event.
            This only exists so we have a way to check if an event was cancelled through
            the new api, which also needs to take effect in the legacy api.
            </summary>
        </member>
        <member name="E:Umbraco.Core.Models.EntityBase.Entity.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.Entity.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, eg. Id.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentBase">
            <summary>
            Defines the base for a Content object with properties that
            are shared between Content and Media.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IAggregateRoot">
            <summary>
            Marker interface for aggregate roots
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.CreatorId">
            <summary>
            Profile of the user who created this Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Level">
            <summary>
            Gets or sets the level of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Name">
            <summary>
            Gets or Sets the Name of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.ParentId">
            <summary>
            Gets or sets the Id of the Parent Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Path">
            <summary>
            Gets or sets the path to the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.SortOrder">
            <summary>
            Gets or sets the sort order of the Entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.EntityBase.IUmbracoEntity.Trashed">
            <summary>
            Boolean indicating whether this Entity is Trashed or not.
            If an Entity is Trashed it will be located in the Recyclebin.
            </summary>
            <remarks>
            When content is trashed it should be unpublished.
            Not all entities support being trashed, they'll always return false.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.HasProperty(System.String)">
            <summary>
            Indicates whether the content object has a property with the supplied alias
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>True if Property with given alias exists, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.GetValue``1(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <typeparam name="TPassType">Type of the value to return</typeparam>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as a <see cref="!:TPassType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the <see cref="T:System.Object"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.IsValid">
            <summary>
            Boolean indicating whether the content and its properties are valid
            </summary>
            <returns>True if content is valid otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentBase.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.Version">
            <summary>
            Gets the Guid Id of the Content's Version
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.Properties">
            <summary>
            List of properties, which make up all the data available for this Content object
            </summary>
            <remarks>Properties are loaded as part of the Content object graph</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this Content object
            </summary>
            <remarks>PropertyGroups are kind of lazy loaded as part of the object graph</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentBase.PropertyTypes">
            <summary>
            List of PropertyTypes available on this Content object
            </summary>
            <remarks>PropertyTypes are kind of lazy loaded as part of the object graph</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Protected constructor for ContentBase (Base for Content and Media)
            </summary>
            <param name="name">Localized Name of the entity</param>
            <param name="parentId"></param>
            <param name="contentType"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.#ctor(System.String,Umbraco.Core.Models.IContentBase,Umbraco.Core.Models.IContentTypeComposition,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Protected constructor for ContentBase (Base for Content and Media)
            </summary>
            <param name="name">Localized Name of the entity</param>
            <param name="parent"></param>
            <param name="contentType"></param>
            <param name="properties"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.HasProperty(System.String)">
            <summary>
            Indicates whether the content object has a property with the supplied alias
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>True if Property with given alias exists, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as an <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.GetValue``1(System.String)">
            <summary>
            Gets the value of a Property
            </summary>
            <typeparam name="TPassType">Type of the value to return</typeparam>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns><see cref="T:Umbraco.Core.Models.Property"/> Value as a <see cref="!:TPassType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetValue(System.String,System.Object)">
            <summary>
            Sets the <see cref="T:System.Object"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.String)">
            <summary>
            Sets the <see cref="T:System.String"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Int32)">
            <summary>
            Sets the <see cref="T:System.Int32"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Int64)">
            <summary>
            Sets the <see cref="T:System.Int64"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Boolean"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.DateTime)">
            <summary>
            Sets the <see cref="T:System.DateTime"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFile)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFile"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFileBase"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetPropertyValue(System.String,System.Web.HttpPostedFileWrapper)">
            <summary>
            Sets the <see cref="T:System.Web.HttpPostedFileWrapper"/> value of a Property
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <param name="value">Value to set for the Property</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.SetValueOnProperty(System.String,System.Object)">
            <summary>
            Private method to set the value of a property
            </summary>
            <param name="propertyTypeAlias"></param>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentBase.IsValid">
            <summary>
            Boolean indicating whether the content and its properties are valid
            </summary>
            <returns>True if content is valid otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Name">
            <summary>
            Gets or sets the name of the entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Path">
            <summary>
            Gets or sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.CreatorId">
            <summary>
            Profile of the user who created this Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Trashed">
            <summary>
            Boolean indicating whether this Content is Trashed or not.
            If Content is Trashed it will be located in the Recyclebin.
            </summary>
            <remarks>When content is trashed it should be unpublished</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Version">
            <summary>
            Guid Id of the curent Version
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.ContentTypeId">
            <summary>
            Integer Id of the default ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.Properties">
            <summary>
            Collection of properties, which make up all the data available for this Content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this Content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentBase.PropertyTypes">
            <summary>
            List of PropertyTypes available on this Content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.PropertyValues(Umbraco.Core.Models.IContent,System.Object)">
            <summary>
            Set property values by alias with an annonymous object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFileBase)">
            <summary>
            Sets and uploads the file from a HttpPostedFileBase object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFileBase"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFile)">
            <summary>
            Sets and uploads the file from a HttpPostedFile object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFile"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.Web.HttpPostedFileWrapper)">
            <summary>
            Sets and uploads the file from a HttpPostedFileWrapper object as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="value">The <see cref="T:System.Web.HttpPostedFileWrapper"/> containing the file that will be uploaded</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.SetValue(Umbraco.Core.Models.IContentBase,System.String,System.String,System.IO.Stream)">
            <summary>
            Sets and uploads the file from a <see cref="T:System.IO.Stream"/> as the property value
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContentBase"/> to add property value to</param>
            <param name="propertyTypeAlias">Alias of the property to save the value on</param>
            <param name="fileName">Name of the file</param>
            <param name="fileStream"><see cref="T:System.IO.Stream"/> to save to disk</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetCreatorProfile(Umbraco.Core.Models.IContentBase)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Creator of this content/media item.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.GetWriterProfile(Umbraco.Core.Models.IContent)">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the Writer of this content.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.HasPublishedVersion(Umbraco.Core.Models.IContent)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="content"></param>
            <returns>True if the content has any published versiom otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IMedia)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContentBase,System.String)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContentBase"/> object
            </summary>
            <param name="contentBase"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="nodeName"></param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentExtensions.ToXml(Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to generate xml for</param>
            <param name="isPreview">Boolean indicating whether the xml should be generated for preview</param>
            <returns>Xml representation of the passed in <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="T:Umbraco.Core.Enum`1">
            <summary>
            A very useful class for parsing, enumerating and querying Enum objects
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>
            Taken from http://damieng.com/blog/2010/10/17/enums-better-syntax-improved-performance-and-tryparse-in-net-3-5
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Name">
            <summary>
            Name of the faulting macro. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Alias">
            <summary>
            Alias of the faulting macro. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.ItemKey">
            <summary>
            Filename, file path, fully qualified class name, or other key used by the macro engine to do it's processing of the faulting macro.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Exception">
            <summary>
            Exception raised.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Events.MacroErrorEventArgs.Behaviour">
            <summary>
            Gets or sets the desired behaviour when a matching macro causes an error. See
            <see cref="T:Umbraco.Core.MacroErrorBehaviour"/> for definitions. By setting this in your event
            you can override the default behaviour defined in UmbracoSettings.config.
            </summary>
            <value>Macro error behaviour enum.</value>
        </member>
        <member name="T:Umbraco.Core.HashCodeCombiner">
            <summary>
            Used to create a hash code from multiple objects.
            </summary>
            <remarks>
            .Net has a class the same as this: System.Web.Util.HashCodeCombiner and of course it works for all sorts of things
            which we've not included here as we just need a quick easy class for this in order to create a unique
            hash of directories/files to see if they have changed.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.HashCodeCombiner.GetCombinedHashCode">
            <summary>
            Returns the hex code of the combined hash code
            </summary>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.ShowDuplicates">
            <summary>
            Default umbraco behavior - show duplicates in files and sprites
            </summary>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.HideSpriteDuplicates">
            <summary>
            If a file exists on disk with the same name as one in the sprite
            then the file on disk overrules the one in the sprite, the 
            sprite icon will not be shown
            </summary>
        </member>
        <member name="F:Umbraco.Core.IconPickerBehaviour.HideFileDuplicates">
            <summary>
            If a file exists on disk with the same name as one in the sprite
            then the file in the sprite overrules the one on disk, the file
            on disk will be shown
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.FileSystemWrapper">
            <summary>
            All custom file systems that are based upon another IFileSystem should inherit from FileSystemWrapper
            </summary>
            <remarks>
            An IFileSystem is generally used as a base file system, for example like a PhysicalFileSystem or an S3FileSystem.
            Then, other custom file systems are wrapped upon these files systems like MediaFileSystem, etc... All of the custom
            file systems must inherit from FileSystemWrapper.
            
            This abstract class just wraps the 'real' IFileSystem object passed in to its constructor.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Inline">
            <summary>
            Default umbraco behavior - show an inline error within the
            macro but allow the page to continue rendering.
            </summary>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Silent">
            <summary>
            Silently eat the error and do not display the offending macro.
            </summary>
        </member>
        <member name="F:Umbraco.Core.MacroErrorBehaviour.Throw">
            <summary>
            Throw an exception which can be caught by the global error handler
            defined in Application_OnError. If no such error handler is defined
            then you'll see the Yellow Screen Of Death (YSOD) error page.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeBase">
            <summary>
            Represents an abstract class for base ContentType properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeBase">
            <summary>
            Defines the base for a ContentType with properties that
            are shared between ContentTypes and MediaTypes.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.SetLazyParentId(System.Lazy{System.Int32})">
            <summary>
            Sets the ParentId from the lazy integer id
            </summary>
            <param name="id">Id of the Parent</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Alias">
            <summary>
            Gets or Sets the Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Description">
            <summary>
            Gets or Sets the Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Icon">
            <summary>
            Gets or Sets the Icon for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.Thumbnail">
            <summary>
            Gets or Sets the Thumbnail for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or Sets a list of integer Ids of the ContentTypes allowed under the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyGroups">
            <summary>
            Gets or Sets a collection of Property Groups
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeBase.PropertyTypes">
            <summary>
            Gets an enumerable list of Property Types aggregated for all groups
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.AddPropertyType(Umbraco.Core.Models.PropertyType)">
            <summary>
            Adds a PropertyType, which does not belong to a PropertyGroup.
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.MovePropertyType(System.String,System.String)">
            <summary>
            Moves a PropertyType to a specified PropertyGroup
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType to move</param>
            <param name="propertyGroupName">Name of the PropertyGroup to move the PropertyType to</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.RemovePropertyType(System.String)">
            <summary>
            Removes a PropertyType from the current ContentType
            </summary>
            <param name="propertyTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.PropertyType"/> to remove</param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeBase.SetLazyParentId(System.Lazy{System.Int32})">
            <summary>
            Sets the ParentId from the lazy integer id
            </summary>
            <param name="id">Id of the Parent</param>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
            <remarks>Might not be necessary if handled as a relation?</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Name">
            <summary>
            Gets or sets the name of the current entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Path">
            <summary>
            Gets of sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Alias">
            <summary>
            The Alias of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Description">
            <summary>
            Description for the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Icon">
            <summary>
            Name of the icon (sprite class) used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Thumbnail">
            <summary>
            Name of the thumbnail used to identify the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.CreatorId">
            <summary>
            Gets or sets the Id of the user who created this ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedAsRoot">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is allowed at the root
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.IsContainer">
            <summary>
            Gets or Sets a boolean indicating whether this ContentType is a Container
            </summary>
            <remarks>
            ContentType Containers doesn't show children in the tree, but rather in grid-type view.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.Trashed">
            <summary>
            Boolean indicating whether this ContentType is Trashed or not.
            If ContentType is Trashed it will be located in the Recyclebin.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.AllowedContentTypes">
            <summary>
            Gets or sets a list of integer Ids for allowed ContentTypes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyGroups">
            <summary>
            List of PropertyGroups available on this ContentType
            </summary>
            <remarks>A PropertyGroup corresponds to a Tab in the UI</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeBase.PropertyTypes">
            <summary>
            List of PropertyTypes available on this ContentType.
            This list aggregates PropertyTypes across the PropertyGroups.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeCompositionBase">
            <summary>
            Represents an abstract class for composition specific ContentType properties and methods
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentTypeComposition">
            <summary>
            Defines the Composition of a ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a new ContentType to the list of composite ContentTypes
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to add</param>
            <returns>True if ContentType was added, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.RemoveContentType(System.String)">
            <summary>
            Removes a ContentType with the supplied alias from the the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType was removed, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition 
            </summary>
            <returns>An enumerable list of string aliases</returns>
        </member>
        <member name="M:Umbraco.Core.Models.IContentTypeComposition.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition 
            </summary>
            <returns>An enumerable list of integer ids</returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.ContentTypeComposition">
            <summary>
            Gets a list of ContentTypes that make up a composition of PropertyGroups and PropertyTypes for the current ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyGroups">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.PropertyGroup"/> objects from the composition
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentTypeComposition.CompositionPropertyTypes">
            <summary>
            Gets a list of <see cref="T:Umbraco.Core.Models.PropertyType"/> objects from the composition
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddContentType(Umbraco.Core.Models.IContentTypeComposition)">
            <summary>
            Adds a new ContentType to the list of composite ContentTypes
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.ContentType"/> to add</param>
            <returns>True if ContentType was added, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.RemoveContentType(System.String)">
            <summary>
            Removes a ContentType with the supplied alias from the the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.ContentType"/></param>
            <returns>True if ContentType was removed, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeCompositionExists(System.String)">
            <summary>
            Checks if a ContentType with the supplied alias exists in the list of composite ContentTypes
            </summary>
            <param name="alias">Alias of a <see cref="T:Umbraco.Core.Models.ContentType"/></param>
            <returns>True if ContentType with alias exists, otherwise returns False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.PropertyTypeExists(System.String)">
            <summary>
            Checks whether a PropertyType with a given alias already exists
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType</param>
            <returns>Returns <c>True</c> if a PropertyType with the passed in alias exists, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyGroup(System.String)">
            <summary>
            Adds a PropertyGroup.
            This method will also check if a group already exists with the same name and link it to the parent.
            </summary>
            <param name="groupName">Name of the PropertyGroup to add</param>
            <returns>Returns <c>True</c> if a PropertyGroup with the passed in name was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.AddPropertyType(Umbraco.Core.Models.PropertyType,System.String)">
            <summary>
            Adds a PropertyType to a specific PropertyGroup
            </summary>
            <param name="propertyType"><see cref="T:Umbraco.Core.Models.PropertyType"/> to add</param>
            <param name="propertyGroupName">Name of the PropertyGroup to add the PropertyType to</param>
            <returns>Returns <c>True</c> if PropertyType was added, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionAliases">
            <summary>
            Gets a list of ContentType aliases from the current composition 
            </summary>
            <returns>An enumerable list of string aliases</returns>
            <remarks>Does not contain the alias of the Current ContentType</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionIds">
            <summary>
            Gets a list of ContentType Ids from the current composition 
            </summary>
            <returns>An enumerable list of integer ids</returns>
            <remarks>Does not contain the Id of the Current ContentType</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.ContentTypeComposition">
            <summary>
            List of ContentTypes that make up a composition of PropertyGroups and PropertyTypes for the current ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyGroups">
            <summary>
            Returns a list of <see cref="T:Umbraco.Core.Models.PropertyGroup"/> objects from the composition
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeCompositionBase.CompositionPropertyTypes">
            <summary>
            Returns a list of <see cref="T:Umbraco.Core.Models.PropertyType"/> objects from the composition
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentTypeSort">
            <summary>
            Represents a POCO for setting sort order on a ContentType reference
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.EntityBase.IValueObject">
            <summary>
            Marker interface for value object, eg. objects without
            the same kind of identity as an Entity (with its Id).
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Id">
            <summary>
            Gets or sets the Id of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.SortOrder">
            <summary>
            Gets or sets the Sort Order of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentTypeSort.Alias">
            <summary>
            Gets or sets the Alias of the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.#ctor(System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="fileContent">path to source</param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="fileContent">path to source</param>
            <param name="source">actual source</param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseStyleSheet">
            <summary>
            (BNF) stylesheet : [ CDO | CDC | S | statement ]*;
            </summary>
            <returns>CSS StyleSheet parse tree</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseStatement">
            <summary>
            (BNF) statement : ruleset | at-rule;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseAtRule">
            <summary>
            (BNF) at-rule : ATKEYWORD S* any* [ block | ';' S* ];
            </summary>
            <returns></returns>
            <remarks>
            NOTE: each at-rule might parse differently according to CSS3
            The @media block for example contains a block of statements
            while other at-rules with a block contain a block of declarations
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseRuleSet">
            <summary>
            (BNF) ruleset : selector? '{' S* declaration? [ ';' S* declaration? ]* '}' S*;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseSelector">
            <summary>
            (BNF) selector: any+;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseDeclaration">
            <summary>
            (BNF) declaration : property ':' S* value;
            (BNF) property    : IDENT S*;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.ParseValue">
            <summary>
            (BNF) value :	[ any | block | ATKEYWORD S* ]+;
            (BNF) any :		[ IDENT | NUMBER | PERCENTAGE | DIMENSION | STRING
            				| DELIM | URI | HASH | UNICODE-RANGE | INCLUDES
            				| FUNCTION S* any* ')' | DASHMATCH | '(' S* any* ')'
            				| '[' S* any* ']' ] S*;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.Read(System.Char@)">
            <summary>
            
            </summary>
            <param name="ch"></param>
            <returns>Success</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.Copy(System.Int32)">
            <summary>
            Copies chars from start until the position before the current position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.CssParser.PutBack">
            <summary>
            Put one character back
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Css.CssSyntax">
            <summary>
            CSS3 inconsistently specifies more than one grammar:
            http://www.w3.org/TR/css3-syntax/#style
            http://www.w3.org/TR/css3-syntax/#detailed-grammar
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Css.CssAtRule">
            <summary>
            
            </summary>
            <remarks>
            NOTE: each at-rule might parse differently according to CSS3
            The @media block for example contains a block of statements
            while other at-rules with a block contain a block of declarations
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Css.FileUtility.PrepSavePath(System.String)">
            <summary>
            Makes sure directory exists and if file exists is not readonly.
            </summary>
            <param name="filename"></param>
            <returns>if valid path</returns>
        </member>
        <member name="T:Umbraco.Core.Models.Css.ReadFilter">
            <summary>
            Defines a character sequence to filter out when reading.
            </summary>
            <remarks>
            If the sequence exists in the read source, it will be read out as if it was never there.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Css.FilterTrie">
            <summary>
            Creates a Trie out of ReadFilters
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Css.TrieNode`2">
            <summary>
            A generic node for building a Trie
            </summary>
            <typeparam name="TKey">the Type used for the node path</typeparam>
            <typeparam name="TValue">the Type used for the node value</typeparam>
            <remarks>
            http://en.wikipedia.org/wiki/Trie
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Css.TrieNode`2.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Css.TrieNode`2.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.TrieNode`2.Contains(`0)">
            <summary>
            Determines if child exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.#ctor(System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Css.ReadFilter})">
            <summary>
            Ctor.
            </summary>
            <param name="filePath"></param>
            <param name="source"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Css.ReadFilter})">
            <summary>
            Ctor.
            </summary>
            <param name="filePath"></param>
            <param name="source"></param>
            <param name="filters"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.#ctor(System.String,System.String)">
            <summary>
            Ctor.
            </summary>
            <param name="filePath"></param>
            <param name="source"></param>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Peek">
            <summary>
            Unfiltered look ahead
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Read">
            <summary>
            Filtered read of the next source char.  Counters are incremented.
            </summary>
            <returns></returns>
            <remarks>
            NewLine sequences (CR/LF, LF, CR) are normalized to LF.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.PutBack">
            <summary>
            Backs the current position up one.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Copy(System.Int32,System.Int32)">
            <summary>
            Copies a range from the source
            </summary>
            <param name="start">starting position, inclusive</param>
            <param name="end">ending position, inclusive</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Peek(System.Int32)">
            <summary>
            Peeks with n chars of lookahead.
            </summary>
            <param name="lookahead"></param>
            <returns>unfiltered read</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Read(System.Boolean)">
            <summary>
            Reads the next char 
            </summary>
            <param name="filter">if filtering</param>
            <returns>the next char, or -1 if at EOF</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.NormalizeSpaces(System.Char,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Normalized CR/CRLF/LF/FF to LF, or all whitespace to SPACE if NormalizeWhiteSpace is true
            </summary>
            <param name="ch"></param>
            <param name="pos"></param>
            <param name="line"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.CopyRead(System.Int32@)">
            <summary>
            Read for Copying (doesn't reset line.col counters)
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Filter(System.Char)">
            <summary>
            Filters based upon an internal Trie
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Css.LineReader.Dispose(System.Boolean)">
            <summary>
            Free source resources.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.FilePath">
            <summary>
            Gets the path to the source file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.Length">
            <summary>
            Gets the size of source file in chars
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.Line">
            <summary>
            Gets the current line number
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.Column">
            <summary>
            Gets the current col number
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.Position">
            <summary>
            Gets the current char position
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.EndOfFile">
            <summary>
            Gets if at end the end of file
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.NormalizeWhiteSpace">
            <summary>
            Gets and sets if whitespace is normalized while reading
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Css.LineReader.Current">
            <summary>
            Gets the current char
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryItem">
            <summary>
            Represents a Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.DictionaryItem.AddingEntity">
            <summary>
            Method to call before inserting a new entity in the db
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ParentId">
            <summary>
            Gets or Sets the Parent Id of the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.ItemKey">
            <summary>
            Gets or sets the Key for the Dictionary Item
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryItem.Translations">
            <summary>
            Gets or sets a list of translations for the Dictionary Item
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DictionaryTranslation">
            <summary>
            Represents a translation for a <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.IDictionaryTranslation.Language"/> for the translation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Language">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.DictionaryTranslation.Language"/> for the translation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DictionaryTranslation.Value">
            <summary>
            Gets or sets the translated text
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.File">
            <summary>
            Represents an abstract file which provides basic functionality for a File with an Alias and Name
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IFile">
            <summary>
            Defines a File
            </summary>
            <remarks>Used for Scripts, Stylesheets and Templates</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IFile.IsValid">
            <summary>
            Boolean indicating whether the file could be validated
            </summary>
            <returns>True if file is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Name">
            <summary>
            Gets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Alias">
            <summary>
            Gets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Path">
            <summary>
            Gets or sets the Path to the File from the root of the site
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IFile.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.File.IsValid">
            <summary>
            Boolean indicating whether the file could be validated
            </summary>
            <returns>True if file is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.File.Name">
            <summary>
            Gets or sets the Name of the File including extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Alias">
            <summary>
            Gets or sets the Alias of the File, which is the name without the extension
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Path">
            <summary>
            Gets or sets the Path to the File from the root of the site
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.File.Content">
            <summary>
            Gets or sets the Content of a File
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataTypeDefinition.ControlId">
            <summary>
            Id of the DataType control
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IDataTypeDefinition.DatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.IsoCode">
            <summary>
            Gets or sets the Iso Code for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureName">
            <summary>
            Gets or sets the Culture Name for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ILanguage.CultureInfo">
            <summary>
            Returns a <see cref="P:Umbraco.Core.Models.ILanguage.CultureInfo"/> object for the current Language
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ITemplate">
            <summary>
            Defines a Template File (Masterpage or Mvc View)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ITemplate.GetTypeOfRenderingEngine">
            <summary>
            Returns the <see cref="T:Umbraco.Core.RenderingEngine"/> that corresponds to the template file
            </summary>
            <returns><see cref="T:Umbraco.Core.RenderingEngine"/></returns>
        </member>
        <member name="T:Umbraco.Core.Models.Language">
            <summary>
            Represents a Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.IsoCode">
            <summary>
            Gets or sets the Iso Code for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureName">
            <summary>
            Gets or sets the Culture Name for the Language
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Language.CultureInfo">
            <summary>
            Returns a <see cref="P:Umbraco.Core.Models.Language.CultureInfo"/> object for the current Language
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Media">
            <summary>
            Represents a Media object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMedia.ChangeContentType(Umbraco.Core.Models.IMediaType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IMedia.ChangeContentType(Umbraco.Core.Models.IMediaType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="P:Umbraco.Core.Models.IMedia.ContentType">
            <summary>
            Gets the ContentType used by this Media object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,Umbraco.Core.Models.IMedia,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">ame of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.#ctor(System.String,System.Int32,Umbraco.Core.Models.IMediaType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Media object
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of the Parent IMedia</param>
            <param name="contentType">MediaType for the current Media object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeContentType(Umbraco.Core.Models.IMediaType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IMediaType"/> for the current Media object and removes PropertyTypes,
            which are not part of the new MediaType.
            </summary>
            <param name="contentType">New MediaType for this Media</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="M:Umbraco.Core.Models.Media.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Media.ContentType">
            <summary>
            Gets the ContentType used by this Media object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MediaType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Media"/> object is based on
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMediaType">
            <summary>
            Defines a ContentType, which Media is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.MediaType.UpdatingEntity">
            <summary>
            Method to call when Entity is being updated
            </summary>
            <remarks>Modified Date is set and a new Version guid is set</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IProfile">
            <summary>
            Defines the the Profile interface
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.IUser">
            <summary>
            Defines the interface for a <see cref="T:Umbraco.Core.Models.Membership.User"/>
            </summary>
            <remarks>Will be left internal until a proper Membership implementation is part of the roadmap</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.Member">
            <summary>
            Represents an Umbraco Member
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.Profile">
            <summary>
            Represents a Profile which is shared between Members and Users
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.Profile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.Membership.Profile"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Membership.Profile.SetProviderUserKeyType(System.Type)">
            <summary>
            Sets the type of the provider user key.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.Profile.ProviderUserKeyType">
            <summary>
            Gets or sets the type of the provider user key.
            </summary>
            <value>
            The type of the provider user key.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.MemberGroup">
            <summary>
            Represents a Group for a Backoffice User
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.MemberType">
            <summary>
            Represents the Type for an Umbraco Member
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.User">
            <summary>
            Represents a backoffice user
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserProfile">
            <summary>
            Represents the Profile implementation for a backoffice User
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserProfile.SessionTimeout">
            <summary>
            Gets or sets the session timeout.
            </summary>
            <value>
            The session timeout.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserProfile.StartContentId">
            <summary>
            Gets or sets the start content id.
            </summary>
            <value>
            The start content id.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserProfile.StartMediaId">
            <summary>
            Gets or sets the start media id.
            </summary>
            <value>
            The start media id.
            </value>
        </member>
        <member name="P:Umbraco.Core.Models.Membership.UserProfile.Applications">
            <summary>
            Gets or sets the applications.
            </summary>
            <value>
            The applications.
            </value>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserGroup">
            <summary>
            Represents a Group for a Backoffice User
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Membership.UserType">
            <summary>
            Represents the Type for a Backoffice User
            </summary>
            <remarks>
            Should be internal until a proper user/membership implementation
            is part of the roadmap.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyExtensions.ToXml(Umbraco.Core.Models.Property)">
            <summary>
            Creates the xml representation for the <see cref="T:Umbraco.Core.Models.Property"/> object
            </summary>
            <param name="property"><see cref="T:Umbraco.Core.Models.Property"/> to generate xml for</param>
            <returns>Xml of the property and its value</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeExtensions.DataType(Umbraco.Core.Models.PropertyType,System.Int32)">
            <summary>
            Resolves the IDataType for a PropertyType.
            </summary>
            <param name="propertyType">PropertyType that references a DataType</param>
            <param name="propertyId">Id of the Property which references this DataType through its PropertyType</param>
            <returns><see cref="T:umbraco.interfaces.IDataType"/></returns>
            <remarks>
            This extension method is left internal because we don't want to take
            a hard dependency on the IDataType, as it will eventually go away and
            be replaced by PropertyEditors. It is however needed to generate xml
            for a property/propertytype when publishing.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PublishedItemType">
            <summary>
            The type of published item
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Relation">
            <summary>
            Represents a Relation between two items
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ParentId">
            <summary>
            Gets or sets the Parent Id of the Relation (Source)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.ChildId">
            <summary>
            Gets or sets the Child Id of the Relation (Destination)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationType">
            <summary>
            Gets or sets the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.Comment">
            <summary>
            Gets or sets a comment for the Relation
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Relation.RelationTypeId">
            <summary>
            Gets the Id of the <see cref="P:Umbraco.Core.Models.Relation.RelationType"/> that this Relation is based on.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.RelationType">
            <summary>
            Represents a RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Name">
            <summary>
            Gets or sets the Name of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.Alias">
            <summary>
            Gets or sets the Alias of the RelationType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.IsBidirectional">
            <summary>
            Gets or sets a boolean indicating whether the RelationType is Bidirectional (true) or Parent to Child (false)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ParentObjectType">
            <summary>
            Gets or sets the Parents object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.RelationType.ChildObjectType">
            <summary>
            Gets or sets the Childs object type id
            </summary>
            <remarks>Corresponds to the NodeObjectType in the umbracoNode table</remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Script">
            <summary>
            Represents a Script file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Script.IsValid">
            <summary>
            Boolean indicating whether the file could be validated
            </summary>
            <remarks>
            The validation logic was previsouly placed in the codebehind of editScript.aspx,
            but has been moved to the script file so the validation is central.
            </remarks>
            <returns>True if file is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.Script.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Stylesheet">
            <summary>
            Represents a Stylesheet file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.FormatCss(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Css.ICssValue},System.Boolean)">
            <summary>
            Formats a list of statements to a simple <see cref="T:Umbraco.Core.Models.StylesheetProperty"/> object
            </summary>
            <param name="statements">Enumerable list of <see cref="T:Umbraco.Core.Models.Css.ICssValue"/> statements</param>
            <param name="isPartOfAtRule">Boolean indicating whether the current list of statements is part of an @ rule</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.StylesheetProperty"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.FormatCss(Umbraco.Core.Models.Css.CssValueList)">
            <summary>
            Formats a <see cref="T:Umbraco.Core.Models.Css.CssValueList"/> to a single string
            </summary>
            <param name="valueList"><see cref="T:Umbraco.Core.Models.Css.CssValueList"/> to format</param>
            <returns>Value list formatted as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.IsValid">
            <summary>
            Boolean indicating whether the file could be validated
            </summary>
            <returns>True if file is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Stylesheet.IsFileValidCss">
            <summary>
            Boolean indicating whether the file is valid css using a css parser
            </summary>
            <returns>True if css is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.Properties">
            <summary>
            Returns a flat list of <see cref="T:Umbraco.Core.Models.StylesheetProperty"/> objects
            </summary>
            <remarks>
            Please note that the list is flattend by formatting single css selectors with
            its value(s). Blocks in css @ rules are also flatten, but noted as part of an @ rule
            by setting the <see cref="T:Umbraco.Core.Models.StylesheetProperty"/> property IsPartOfAtRule=true.
            This is done to make the stylesheet usable in the backoffice.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Stylesheet.HasIdentity">
            <summary>
            Indicates whether the current entity has an identity, which in this case is a path/name.
            </summary>
            <remarks>
            Overrides the default Entity identity check.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.StylesheetProperty">
            <summary>
            Represents a Stylesheet Property
            </summary>
            <remarks>
            Properties are always formatted to have a single selector, so it can be used in the backoffice
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Task">
            <summary>
            Represents a Task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.Closed">
            <summary>
            Gets or sets a boolean indicating whether the task is closed
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.TaskType">
            <summary>
            Gets or sets the TaskType of the Task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.EntityId">
            <summary>
            Gets or sets the Id of the entity, which this task is associated to
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.OwnerUserId">
            <summary>
            Gets or sets the Id of the user, who owns this task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.AssigneeUserId">
            <summary>
            Gets or sets the Id of the user, who is assigned to this task
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Task.Comment">
            <summary>
            Gets or sets the Comment for the Task
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.TaskType">
            <summary>
            Represents a Task Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.TaskType.Alias">
            <summary>
            Gets or sets the Alias of the TaskType
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Template">
            <summary>
            Represents a Template file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Template.GetTypeOfRenderingEngine">
            <summary>
            Returns the <see cref="T:Umbraco.Core.RenderingEngine"/> that corresponds to the template file
            </summary>
            <returns><see cref="T:Umbraco.Core.RenderingEngine"/></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Template.IsValid">
            <summary>
            Boolean indicating whether the file could be validated
            </summary>
            <returns>True if file is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Template.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.ApplicationEventsResolver">
            <summary>
            A resolver to return all IApplicationEvents objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="applicationEventHandlers"></param>		
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.InstantiateLegacyStartupHanlders">
            <summary>
            Create instances of all of the legacy startup handlers
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.InstanceTypes">
            <summary>
            Override in order to only return types of IApplicationEventHandler and above, 
            do not include the legacy types of IApplicationStartupHandler
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.ApplicationEventsResolver.ApplicationEventHandlers">
            <summary>
            Gets the <see cref="T:Umbraco.Core.IApplicationEventHandler"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider">
            <summary>
            The InMemory registry looks up objects in an in-memory dictionary for fast retrival
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider">
            <summary>
            Defines the implementation of a Cache Provider intented to back a repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider.GetById(System.Type,System.Guid)">
            <summary>
            Gets an Entity from the cache by Type and Id
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider.GetByIds(System.Type,System.Collections.Generic.List{System.Guid})">
            <summary>
            Gets an Entity from the cache by Type and Ids
            </summary>
            <param name="type"></param>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider.GetAllByType(System.Type)">
            <summary>
            Gets all Entities of specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider.Save(System.Type,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Saves the Entity
            </summary>
            <param name="type"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider.Delete(System.Type,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Deletes the Entity from the cache
            </summary>
            <param name="type"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider.GetById(System.Type,System.Guid)">
            <summary>
            Retrives an object of the specified type by its Id
            </summary>
            <param name="type">The type of the object to retrive, which implements <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="id">The Guid Id of the Object to retrive</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider.GetByIds(System.Type,System.Collections.Generic.List{System.Guid})">
            <summary>
            Retrives objects of the specified type by their Ids
            </summary>
            <param name="type">The type of the objects to retrive, which implements <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="ids">The Guid Ids of the Objects to retrive</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider.GetAllByType(System.Type)">
            <summary>
            Retrives all objects of the specified type
            </summary>
            <param name="type">The type of the objects to retrive, which implements <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider.Save(System.Type,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Saves an object in the registry cache
            </summary>
            <param name="type"> </param>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Caching.InMemoryCacheProvider.Delete(System.Type,Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Deletes an object from the registry cache
            </summary>
            <param name="type"> </param>
            <param name="entity"></param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Caching.RuntimeCacheProvider">
            <summary>
            The Runtime Cache provider looks up objects in the Runtime cache for fast retrival
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PetaPocoMapper">
            <summary>
            Represents the PetaPocoMapper, which is the implementation of the IMapper interface.
            This is currently only used to ensure that nullable dates are not saved to the database.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute">
            <summary>
            Attribute that represents a db constraint
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Name">
            <summary>
            Gets or sets the name of the constraint
            </summary>
            <remarks>
            Overrides the default naming of a property constraint:
            DF_tableName_propertyName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ConstraintAttribute.Default">
            <summary>
            Gets or sets the Default value
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute">
            <summary>
            Attribute that represents the usage of a special type
            </summary>
            <remarks>
            Should only be used when the .NET type can't be directly translated to a DbType.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypeAttribute.DatabaseType">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes"/> for this column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute">
            <summary>
            Attribute that represents the length of a column
            </summary>
            <remarks>Used to define the length of fixed sized columns - typically used for nvarchar</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.LengthAttribute.Length">
            <summary>
            Gets or sets the length of a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.SpecialDbTypes">
            <summary>
            Enum with the two special types that has to be supported because
            of the current umbraco db schema.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute">
            <summary>
            Attribute that represents a Foreign Key reference
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute">
            <summary>
            Attribute that represents a reference between two tables/DTOs
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ReferencesAttribute.Type">
            <summary>
            Gets or sets the Type of the referenced DTO/table
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Name">
            <summary>
            Gets or sets the name of the foreign key refence
            </summary>
            <remarks>
            Overrides the default naming of a foreign key reference:
            FK_thisTableName_refTableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.ForeignKeyAttribute.Column">
            <summary>
            Gets or sets the name of the Column that this foreign key should reference.
            </summary>
            <remarks>PrimaryKey column is used by default</remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute">
            <summary>
            Attribute that represents an Index
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.Name">
            <summary>
            Gets or sets the name of the Index
            </summary>
            <remarks>
            Overrides default naming of indexes: 
            IX_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.IndexType">
            <summary>
            Gets or sets the type of index to create
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.IndexAttribute.ForColumns">
            <summary>
            Gets or sets the column name(s) for the current index
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.IndexTypes">
            <summary>
            Enum for the 3 types of indexes that can be created
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute">
            <summary>
            Attribute that represents the Null-setting of a column
            </summary>
            <remarks>
            This should only be used for Columns that can be Null.
            By convention the Columns will be "NOT NULL".
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettingAttribute.NullSetting">
            <summary>
            Gets or sets the <see cref="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings"/> for a column
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.NullSettings">
            <summary>
            Enum with the 2 possible Null settings: Null or Not Null
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute">
            <summary>
            Attribute that represents a Primary Key
            </summary>
            <remarks>
            By default, Clustered and AutoIncrement is set to true.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Clustered">
            <summary>
            Gets or sets a boolean indicating whether the primary key is clustered.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.AutoIncrement">
            <summary>
            Gets or sets a boolean indicating whether the primary key is auto incremented.
            </summary>
            <remarks>Defaults to true</remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.Name">
            <summary>
            Gets or sets the name of the PrimaryKey.
            </summary>
            <remarks>
            Overrides the default naming of a PrimaryKey constraint: 
            PK_tableName
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.OnColumns">
            <summary>
            Gets or sets the names of the columns for this PrimaryKey.
            </summary>
            <remarks>
            Should only be used if the PrimaryKey spans over multiple columns.
            Usage: [nodeId], [otherColumn]
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.DatabaseAnnotations.PrimaryKeyColumnAttribute.IdentitySeed">
            <summary>
            Gets or sets the Identity Seed, which is used for Sql Ce databases.
            </summary>
            <remarks>
            We'll only look for changes to seeding and apply them if the configured database
            is an Sql Ce database.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Persistence.DefaultDatabaseFactory">
            <summary>
            The default implementation for the IDatabaseFactory
            </summary>
            <remarks>
            If we are running in an http context
            it will create one per context, otherwise it will be a global singleton object which is NOT thread safe
            since we need (at least) a new instance of the database object per thread.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.DisposableObject">
            <summary>
            Abstract implementation of logic commonly required to safely handle disposable unmanaged resources.
            </summary>
        </member>
        <member name="M:Umbraco.Core.DisposableObject.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Umbraco.Core.DisposableObject.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Core.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="P:Umbraco.Core.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Umbraco.Core.Persistence.IDatabaseFactory">
            <summary>
            Used to create the UmbracoDatabase for use in the DatabaseContext
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DefaultDatabaseFactory.#ctor">
            <summary>
            Default constructor initialized with the GlobalSettings.UmbracoConnectionName
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String)">
            <summary>
            Constructor accepting custom connection string
            </summary>
            <param name="connectionStringName">Name of the connection string in web.config</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String,System.String)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Content"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.ContentTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.ContentType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DataTypeDefinitionMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DataTypeDefinition"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryItem"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.DictionaryTranslationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.DictionaryTranslation"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.LanguageMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Language"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Media"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.MediaTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.MediaType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyGroupMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.PropertyTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.PropertyType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Relation"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.RelationTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.RelationType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Mappers.UserTypeMapper">
            <summary>
            Represents a <see cref="T:Umbraco.Core.Models.Membership.UserType"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.IMigration">
            <summary>
            Marker interface for database migrations
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.IMigrationExpression">
            <summary>
            Marker interface for migration expressions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.BaseDataCreation">
            <summary>
            Represents the initial data creation by running Insert for the base data.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.BaseDataCreation.InitializeBaseData(System.String)">
            <summary>
            Initialize the base data creation by inserting the data foundation for umbraco
            specific to a table
            </summary>
            <param name="tableName">Name of the table to create base data for</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation">
            <summary>
            Represents the initial database schema creation by running CreateTable for all DTOs against the db.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.UninstallDatabaseSchema">
            <summary>
            Drops all Umbraco tables in the db
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.InitializeDatabaseSchema">
            <summary>
            Initialize the database by creating the umbraco db schema
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.ValidateSchema">
            <summary>
            Validates the schema of the current database
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireBeforeCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireAfterCreation(Umbraco.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.DatabaseEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaResult.DetermineInstalledVersion">
            <summary>
            Determines the version of the currently installed database.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> with Major and Minor values for 
            non-empty database, otherwise "0.0.0" for empty databases.
            </returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.Initial.DatabaseSchemaResult.GetSummary">
            <summary>
            Gets a summary of the schema validation result
            </summary>
            <returns>A string containing a human readable string with a summary message</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationAttribute">
            <summary>
            Represents the Migration attribute, which is used to mark classes as
            database migrations with Up/Down methods for pushing changes UP or pulling them DOWN.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.TargetVersion">
            <summary>
            Gets or sets the target version of this migration.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.SortOrder">
            <summary>
            Gets or sets the sort order, which is the order this migration will be run in.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationAttribute.ProductName">
            <summary>
            Gets or sets the name of the product, which this migration belongs to.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationResolver">
            <summary>
            A resolver to return all IMigrations
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="migrations"></param>
            <remarks>
            Use transient objects as we don't want these as singletons and take up memory that is not required
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Migrations.MigrationResolver.Migrations">
            <summary>
            Gets the migrations
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Migrations.MigrationRunner">
            <summary>
            Represents the Migration Runner, which is used to apply migrations to
            the umbraco database.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.Execute(Umbraco.Core.Persistence.Database,System.Boolean)">
            <summary>
            Executes the migrations against the database.
            </summary>
            <param name="database">The PetaPoco Database, which the migrations will be run against</param>
            <param name="isUpgrade">Boolean indicating whether this is an upgrade or downgrade</param>
            <returns><c>True</c> if migrations were applied, otherwise <c>False</c></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Migrations.MigrationRunner.Execute(Umbraco.Core.Persistence.Database,Umbraco.Core.Persistence.DatabaseProviders,System.Boolean)">
            <summary>
            Executes the migrations against the database.
            </summary>
            <param name="database">The PetaPoco Database, which the migrations will be run against</param>
            <param name="databaseProvider"></param>
            <param name="isUpgrade">Boolean indicating whether this is an upgrade or downgrade</param>
            <returns><c>True</c> if migrations were applied, otherwise <c>False</c></returns>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.MigrationRunner.Migrating">
            <summary>
            Occurs before Migration
            </summary>
        </member>
        <member name="E:Umbraco.Core.Persistence.Migrations.MigrationRunner.Migrated">
            <summary>
            Occurs after Migration
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.PetaPocoSqlExtensions">
            <summary>
            Extension methods adding strong types to PetaPoco's Sql Builder
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.Query`1">
            <summary>
            Represents the Query Builder for building LINQ translatable queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Querying.SqlTranslator`1">
            <summary>
            Represents the Sql Translator for translating a IQuery object to Sql
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.PetaPocoRepositoryBase`2">
            <summary>
            Represent an abstract Repository for PetaPoco based repositories
            </summary>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RepositoryBase`2">
            <summary>
            Represent an abstract Repository, which is the base of the Repository implementations
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2">
            <summary>
            Defines the implementation of a Repository, which allows queries against the <see cref="!:TEntity"/>
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepository`2">
            <summary>
            Defines the implementation of a Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepository">
            <summary>
            Defines the base implementation of a Repository
            </summary>
            <remarks>
            Currently this interface is empty but it is useful for flagging a repository without having generic parameters, it also might
            come in handy if we need to add anything to the base/non-generic repository interface.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.AddOrUpdate(`1)">
            <summary>
            Adds or Updates an Entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.Delete(`1)">
            <summary>
            Deletes an Entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.Get(`0)">
            <summary>
            Gets an Entity by Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.GetAll(`0[])">
            <summary>
            Gets all entities of the spefified type
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepository`2.Exists(`0)">
            <summary>
            Boolean indicating whether an Entity with the specified Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Gets all entities of the specified type and query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryQueryable`2.Count(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Returns the count for the specified query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository">
            <summary>
            Defines the Unit Of Work-part of a repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.AddOrUpdate(`1)">
            <summary>
            Adds or Updates an entity of type TEntity
            </summary>
            <remarks>This method is backed by an <see cref="T:Umbraco.Core.Persistence.Caching.IRepositoryCacheProvider"/> cache</remarks>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Delete(`1)">
            <summary>
            Deletes the passed in entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Get(`0)">
            <summary>
            Gets an entity by the passed in Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.GetAll(`0[])">
            <summary>
            Gets all entities of type TEntity or a list according to the passed in Ids
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Gets a list of entities by the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Exists(`0)">
            <summary>
            Returns a boolean indicating whether an entity with the passed Id exists
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.Count(Umbraco.Core.Persistence.Querying.IQuery{`1})">
            <summary>
            Returns an integer with the count of entities found with the passed in query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistNewItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the new entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistUpdatedItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the updated entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.PersistDeletedItem(Umbraco.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the deletion of the entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.ConvertIdToGuid(`0)">
            <summary>
            Internal method that handles the convertion of an object Id
            to an Integer and then a Guid Id.
            </summary>
            <remarks>In the future it should be possible to change this method
            so it converts from object to guid if/when we decide to go from
            int to guid based ids.</remarks>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.UnitOfWork">
            <summary>
            Returns the Unit of Work added to the repository
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.RepositoryBase`2.UnitKey">
            <summary>
            Internal for testing purposes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.PetaPocoRepositoryBase`2.UnitOfWork">
            <summary>
            Returns the database Unit of Work added to the repository
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.VersionableRepositoryBase`2.PerformDeleteVersion(System.Int32,System.Guid)">
            <summary>
            Protected method to execute the delete statements for removing a single version for a TEntity item.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> to delete a version from</param>
            <param name="versionId">Guid id of the version to delete</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2">
            <summary>
            Defines the implementation of a Repository, which allows getting versions of an <see cref="!:TEntity"/>
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:Umbraco.Core.Models.EntityBase.IAggregateRoot"/> entity for which the repository is used</typeparam>
            <typeparam name="TId">Type of the Id used for this entity</typeparam>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.GetAllVersions(System.Int32)">
            <summary>
            Gets a list of all versions for an <see cref="!:TEntity"/>.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> to retrieve versions from</param>
            <returns>An enumerable list of the same <see cref="!:TEntity"/> object with different versions</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="!:TEntity"/>.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="!:TEntity"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.DeleteVersion(System.Guid)">
            <summary>
            Deletes a specific version from an <see cref="!:TEntity"/> object.
            </summary>
            <param name="versionId">Id of the version to delete</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IRepositoryVersionable`2.DeleteVersions(System.Int32,System.DateTime)">
            <summary>
            Deletes versions from an <see cref="!:TEntity"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="!:TEntity"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.GetByLanguage(System.Int32,System.String)">
            <summary>
            Gets a specific language version of an <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve version from</param>
            <param name="language">Culture code for the language to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentRepository.GetByPublishedVersion(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.IContent})">
            <summary>
            Gets all published Content byh the specified query
            </summary>
            <param name="query">Query to execute against published versions</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.ContentRepository.CreateContentFromDto(Umbraco.Core.Models.Rdbms.DocumentDto,System.Guid)">
            <summary>
            Private method to create a content object from a DocumentDto, which is used by Get and GetByVersion.
            </summary>
            <param name="dto"></param>
            <param name="versionId"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentTypeBaseRepository`2">
            <summary>
            Represent an abstract Repository for ContentType based repositories
            </summary>
            <remarks>Exposes shared functionality</remarks>
            <typeparam name="TId"></typeparam>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ContentTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IContentTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DataTypeDefinitionRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DataTypeDefinition"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.DictionaryRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.DictionaryRepository.NodeObjectTypeId">
            <summary>
            Returns the Top Level Parent Guid Id
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.FileRepository`2.DisposeResources">
            <summary>
            Dispose any disposable properties
            </summary>
            <remarks>
            Dispose the unit of work
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.Repositories.FileRepository`2.UnitOfWork">
            <summary>
            Returns the Unit of Work added to the repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.IMacroRepository">
            <summary>
            Defines the Macro Repository, which exposes CRUD operations for <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <remarks>Uses string Alias as the Id type</remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Repositories.IMediaTypeRepository.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{Umbraco.Core.Models.PropertyType})">
            <summary>
            Gets all entities of the specified <see cref="T:Umbraco.Core.Models.PropertyType"/> query
            </summary>
            <param name="query"></param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.LanguageRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Language"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MacroRepository">
            <summary>
            Represents the Macro Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MediaRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.MediaTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.IMediaType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RelationRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Relation"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.RelationTypeRepository">
            <summary>
            Represents a repository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.RelationType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.ScriptRepository">
            <summary>
            Represents the Script Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.StylesheetRepository">
            <summary>
            Represents the Stylesheet Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.TemplateRepository">
            <summary>
            Represents the Template Repository
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.UserRepository">
            <summary>
            Represents the UserRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUser"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.Repositories.UserTypeRepository">
            <summary>
            Represents the UserTypeRepository for doing CRUD operations for <see cref="T:Umbraco.Core.Models.Membership.IUserType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.RepositoryFactory">
            <summary>
            Used to instantiate each repository type
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2">
            <summary>
            A base class for lazily resolving types for a resolver
            </summary>
            <typeparam name="TResolver"></typeparam>
            <typeparam name="TResolved"></typeparam>
            <remarks>
            This is a special case resolver for when types get lazily resolved in order to resolve the actual types. This is useful
            for when there is some processing overhead (i.e. Type finding in assemblies) to return the Types used to instantiate the instances. 
            In some these cases we don't want to have to type find during application startup, only when we need to resolve the instances.
            
            Important notes about this resolver: This does not support Insert or Remove and therefore does not support any ordering unless 
            the types are marked with the WeightedPluginAttribute.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Lazy{System.Type}},Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Constructor accepting a list of lazy types
            </summary>
            <param name="listOfLazyTypes"></param>
            <param name="scope"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}},Umbraco.Core.ObjectResolution.ObjectLifetimeScope)">
            <summary>
            Constructor accepting a delegate to return a list of types
            </summary>
            <param name="typeListDelegate"></param>
            <param name="scope"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.Web.HttpContextBase,System.Collections.Generic.IEnumerable{System.Lazy{System.Type}})">
            <summary>
            Constructor accepting a list of lazy types
            </summary>
            <param name="httpContext"></param>
            <param name="listOfLazyTypes"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.#ctor(System.Web.HttpContextBase,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor accepting a delegate to return a list of types
            </summary>
            <param name="httpContext"></param>
            <param name="typeListDelegate"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddTypes(System.Collections.Generic.IEnumerable{System.Lazy{System.Type}})">
            <summary>
            Allows adding of multiple lazy types at once
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddTypeListDelegate(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Adds a type list delegate to the collection
            </summary>
            <param name="typeListDelegate"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddType(System.Lazy{System.Type})">
            <summary>
            Adds a lazy type to the list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.AddType(System.Type)">
            <summary>
            Converts the static type added to a lazy type and adds it to the internal list
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.Clear">
            <summary>
            Clears all lazy types
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.HasResolvedTypes">
            <summary>
            Used for unit tests
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.InstanceTypes">
            <summary>
            Once this is called this will resolve all types registered in the lazy list
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.SupportsRemove">
            <summary>
            Does not support removal
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.LazyManyObjectsResolverBase`2.SupportsInsert">
            <summary>
            Does not support insert
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.RepositoryResolver">
            <summary>
            A resolver used to return the current implementation of the RepositoryInstanceFactory
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.RepositoryResolver.SetRepositoryInstanceFactory(Umbraco.Core.Persistence.RepositoryFactory)">
            <summary>
            Can be used by developers at runtime to set their own RepositoryInstanceFactory at app startup
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.RepositoryResolver.ResolveByType``1(Umbraco.Core.Persistence.UnitOfWork.IUnitOfWork)">
            <summary>
            Return the repository based on the type
            </summary>
            <typeparam name="TRepository"></typeparam>
            <param name="unitOfWork"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.RepositoryResolver.Factory">
            <summary>
            Returns the RepositoryInstanceFactory object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider">
            <summary>
            Defines an SqlSyntaxProvider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.MySqlSyntax">
            <summary>
            Static class that provides simple access to the MySql SqlSyntax Provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.MySqlSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for MySql
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderBase`1">
            <summary>
            Represents the Base Sql Syntax provider implementation.
            </summary>
            <remarks>
            All Sql Syntax provider implementations should derive from this abstract class.
            </remarks>
            <typeparam name="TSyntax"></typeparam>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntax">
            <summary>
            Static class that provides simple access to the Sql CE SqlSyntax Provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Ce
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlCeSyntaxProvider.TruncateTable">
            <summary>
            SqlCe doesn't support the Truncate Table syntax, so we just have to do a DELETE FROM which is slower but we have no choice.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntax">
            <summary>
            Static class that provides simple access to the Sql Server SqlSyntax Provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlServerSyntaxProvider">
            <summary>
            Represents an SqlSyntaxProvider for Sql Server
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderAttribute">
            <summary>
            Attribute for implementations of an ISqlSyntaxProvider
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProviderAttribute.ProviderName">
            <summary>
            Gets or sets the ProviderName that corresponds to the sql syntax in a provider.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxContext">
            <summary>
            Singleton to handle the configuration of a SqlSyntaxProvider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProvidersResolver">
            <summary>
            A resolver to return all ISqlSyntaxProvider objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProvidersResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Constructor
            </summary>
            <param name="syntaxProviders"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProvidersResolver.GetByProviderNameOrDefault(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/> by its attributed provider.
            </summary>
            <param name="providerName">ProviderName from the ConnectionString settings</param>
            <returns><see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/> that corresponds to the attributed provider or the default Sql Server Syntax Provider.</returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.SqlSyntax.SqlSyntaxProvidersResolver.SqlSyntaxProviders">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.TransactionType">
            <summary>
            Enum for the 3 types of transactions
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UmbracoDatabase">
            <summary>
            Represents the Umbraco implementation of the PetaPoco Database object
            </summary>
            <remarks>
            Currently this object exists for 'future proofing' our implementation. By having our own inheritied implementation we 
            can then override any additional execution (such as additional loggging, functionality, etc...) that we need to without breaking compatibility since we'll always be exposing
            this object instead of the base PetaPoco database object.	
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.Database.MultiPocoFactory.CallDelegate(System.Int32,System.Data.IDataReader)">
            <summary>
            Calls the delegate at the specified index and returns its values
            </summary>
            <param name="index"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Persistence.Database.MultiPocoFactory.CallCallback``1(System.Delegate,System.Data.IDataReader,System.Int32)">
            <summary>
            Calls the callback delegate and passes in the output of all delegates as the parameters
            </summary>
            <typeparam name="TRet"></typeparam>
            <param name="callback"></param>
            <param name="dr"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Persistence.UmbracoDatabase.InstanceId">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork">
            <summary>
            Represents the Unit of Work implementation for working with files
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWork">
            <summary>
            Defines a Unit Of Work
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterAdded(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be added through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterChanged(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be changed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.RegisterRemoved(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be removed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation">
            <summary>
            Provides a snapshot of an entity and the repository reference it belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.ProcessDate">
            <summary>
            Gets or sets the process date.
            </summary>
            <value>The process date.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork.Operation.Type">
            <summary>
            Gets or sets the type of operation.
            </summary>
            <value>The type of operation.</value>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWorkProvider">
            <summary>
            Represents a Unit of Work Provider for creating a <see cref="T:Umbraco.Core.Persistence.UnitOfWork.FileUnitOfWork"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider">
            <summary>
            Defines a Unit of Work Provider
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork">
            <summary>
            Defines a unit of work when working with a database object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider">
            <summary>
            Defines a Unit of Work Provider for working with an IDatabaseUnitOfWork
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork">
            <summary>
            Represents the Unit of Work implementation for PetaPoco
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.#ctor(Umbraco.Core.Persistence.UmbracoDatabase)">
            <summary>
            Creates a new unit of work instance
            </summary>
            <param name="database"></param>
            <remarks>
            This should normally not be used directly and should be created with the UnitOfWorkProvider
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterAdded(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be added through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterChanged(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be changed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterRemoved(Umbraco.Core.Models.EntityBase.IEntity,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/> instance to be removed through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork"/>
            </summary>
            <param name="entity">The <see cref="T:Umbraco.Core.Models.EntityBase.IEntity"/></param>
            <param name="repository">The <see cref="T:Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkRepository"/> participating in the transaction</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Commit">
            <summary>
            Commits all batched changes within the scope of a PetaPoco transaction <see cref="T:Umbraco.Core.Persistence.Transaction"/>
            </summary>
            <remarks>
            Unlike a typical unit of work, this UOW will let you commit more than once since a new transaction is creaed per
            Commit() call instead of having one Transaction per UOW. 
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.DisposeResources">
            <summary>
            Ensures disposable objects are disposed
            </summary>		
            <remarks>
            Ensures that the Transaction instance is disposed of
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.InstanceId">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation">
            <summary>
            Provides a snapshot of an entity and the repository reference it belongs to.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.ProcessDate">
            <summary>
            Gets or sets the process date.
            </summary>
            <value>The process date.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Type">
            <summary>
            Gets or sets the type of operation.
            </summary>
            <value>The type of operation.</value>
        </member>
        <member name="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider">
            <summary>
            Represents a Unit of Work Provider for creating a <see cref="T:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor">
            <summary>
            Parameterless constructor uses defaults
            </summary>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Persistence.IDatabaseFactory)">
            <summary>
            Constructor accepting an IDatabaseFactory instance
            </summary>
            <param name="dbFactory"></param>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.GetUnitOfWork">
            <summary>
            Creates a Unit of work with a new UmbracoDatabase instance for the work item/transaction.
            </summary>
            <returns></returns>
            <remarks>
            Each PetaPoco UOW uses it's own Database object, not the shared Database object that comes from
            the ApplicationContext.Current.DatabaseContext.Database. This is because each transaction should use it's own Database
            and we Dispose of this Database object when the UOW is disposed.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.CreateUnitOfWork">
            <summary>
            Static helper method to return a new unit of work
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Attributes.PropertyEditorAttribute">
            <summary>
            Defines a PropertyEditor
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Attributes.PropertyEditorAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Attributes.PropertyEditorAttribute.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Attributes.PropertyEditorAttribute.IsContentPropertyEditor">
            <summary>
            Flag determining if this property editor is used to edit content
            </summary>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.Attributes.PropertyEditorAttribute.IsParameterEditor">
            <summary>
            Flag determining if this property editor is used to edit parameters
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.Attributes.ShowLabelAttribute">
            <summary>
            Attribute determining whether or not to hide/show the label of a property
            </summary>
            <remarks>
            This directly affects the meta data property: HideSurroundingHtml
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.BlankPreValueModel">
            <summary>
            A class representing a blank, null or empty pre-value editor. 
            </summary>
            <remarks>
            This class can be used for Property Editors who do not define a Pre value editor
            </remarks>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PreValueModel">
            <summary>
            Abstract class representing a Property Editor's model to render it's Pre value editor
            </summary>
        </member>
        <member name="F:Umbraco.Core.PropertyEditors.EditorModel`1._modelMetadata">
            <summary>
            Gets a list of UI Elements for the property editor.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.EditorModel`1.GetSerializedValue">
            <summary>
            Returns the serialized value for the PropertyEditor
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.EditorModel`1.MetaData">
            <summary>
            Returns the meta data for the current editor model
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.EditorModel`2">
            <summary>
            An abstract class representing the model to render a Property Editor's content editor with PreValues
            </summary>
            <typeparam name="TPreValueModel">The type of the PreValue model.</typeparam>
            <typeparam name="TValueModel"> </typeparam>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.EditorModel`2.#ctor(`1)">
            <summary>
            Constructor
            </summary>
            <param name="preValues">The pre value options used to construct the editor</param>
        </member>
        <member name="P:Umbraco.Core.PropertyEditors.EditorModel`2.PreValueModel">
            <summary>
            The pre value options used to configure the editor
            </summary>
            <value>The pre value model.</value>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PreValueDefinition">
            <summary>
            A class representing a single value of a Pre-Value editor to be saved
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor.#ctor">
            <summary>
            Constructor for a PropertyEditor
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditor`3">
            <summary>
            Abstract class that all Property editors should inherit from
            </summary>
            <typeparam name="TEditorModel"></typeparam>
            <typeparam name="TPreValueModel"></typeparam>
            <typeparam name="TValueModel"> </typeparam>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor`3.CreateEditorModel(`2)">
            <summary>
            Returns the editor model to be used for the property editor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.PropertyEditor`3.CreatePreValueEditorModel">
            <summary>
            Returns the editor model to be used for the prevalue editor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditor`2">
            <summary>
            Abstract class that Property editors should inherit from that don't require a pre-value editor
            </summary>
            <typeparam name="TEditorModel"></typeparam>
            <typeparam name="TValueModel"> </typeparam>
        </member>
        <member name="T:Umbraco.Core.PublishedContentExtensions">
            <summary>
            Extension methods for IPublishedContent
            </summary>
        </member>
        <member name="M:Umbraco.Core.PublishedContentExtensions.GetRecursiveValue(Umbraco.Core.Models.IPublishedContent,System.String)">
            <summary>
            Returns the recursive value of a field by iterating up the parent chain but starting at the publishedContent passed in
            </summary>
            <param name="publishedContent"></param>
            <param name="fieldname"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Dictionary.ICultureDictionary">
            <summary>
            Represents a dictionary based on a specific culture
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Item(System.String)">
            <summary>
            Returns the dictionary value based on the key supplied
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dictionary.ICultureDictionary.Culture">
            <summary>
            Returns the current culture
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Constructor
            </summary>
            <param name="baseElement"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            When this constructor is used the BaseElement becomes equivalent to the strippedXml structure
            </summary>
            <param name="strippedXml"></param>
            <param name="rawXml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.String,System.String)">
            <summary>
            When this constructor is used the BaseElement becomes equivalent to the strippedXml structure
            </summary>
            <param name="strippedXml"></param>
            <param name="rawXml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.#ctor(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Constructor
            </summary>
            <param name="xpni"></param>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToXml">
            <summary>
            Returns the string representation of the BaseElement object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToRawXml">
            <summary>
            Returns the string representation of the RawXmlElement object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.CheckAttributeNameMatch(System.String,System.Xml.Linq.XElement)">
            <summary>
            Checks if the 'name' matches any attributes of xmlElement
            </summary>
            <param name="name">The name to match</param>
            <param name="xmlElement">The xml element to check against</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.CheckNodeNameMatch(System.String,System.Xml.Linq.XElement)">
            <summary>
            Checks if the 'name' matches any elements of xmlElement
            </summary>
            <param name="name">The name to match</param>
            <param name="xmlElement">The xml element to check against</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.XPath(System.String)">
            <summary>
            Executes an XPath expression over the BaseElement object
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Dynamics.DynamicXml.ToString">
            <summary>
            Return the string version of the BaseElement object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.BaseElement">
            <summary>
            Returns the XElement used to create the DynamicXml structure
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.RawXmlElement">
            <summary>
            Returns the raw XElement used to create the DynamicXml structure if one was specified otherwise returns the 
            same value as BaseElement.
            </summary>
            <remarks>
            This is purely used for when an instance of DynamicXml is created with the overload that supports
            passing in both a raw xml version and a dash-stripped xml version. Otherwise this value is exactly the 
            same as BaseElement.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Dynamics.DynamicXml.InnerText">
            <summary>
            Returns the InnertText based on the BaseElement object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Dynamics.ExtensionMethodFinder">
            <summary>
            Utility class for finding extension methods on a type to execute
            </summary>
        </member>
        <member name="M:Umbraco.Core.Dynamics.ExtensionMethodFinder.GetAllExtensionMethods(System.Type,System.String,System.Int32,System.Boolean)">
            <summary>
            Returns all extension methods found matching the definition
            </summary>
            <param name="thisType"></param>
            <param name="name"></param>
            <param name="argumentCount"></param>
            <param name="argsContainsThis"></param>
            <returns></returns>
            <remarks>
            TODO: NOTE: This will be an intensive method to call!! Results should be cached!
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Dynamics.PropertyResultType">
            <summary>
            Currently just used for informational purposes as to where a PropertyResult object was created from.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.UserProperty">
            <summary>
            The property resolved was a normal document property
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.ReflectedProperty">
            <summary>
            The property resolved was a property defined as a member on the document object (IPublishedContent) itself
            </summary>
        </member>
        <member name="F:Umbraco.Core.Dynamics.PropertyResultType.CustomProperty">
            <summary>
            The property was created manually for a custom purpose
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.MediaFileSystem">
            <summary>
            A custom file system provider for media
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacroPropertyType">
            <summary>
            Defines a PropertyType (plugin) for a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.Alias">
            <summary>
            Gets the unique Alias of the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.RenderingAssembly">
            <summary>
            Gets the name of the Assembly used to render the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.RenderingType">
            <summary>
            Gets the name of the Type used to render the Property Type
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroPropertyType.BaseType">
            <summary>
            Gets the Base Type for storing the PropertyType (Int32, String, Boolean)
            </summary>
        </member>
        <member name="T:Umbraco.Core.Macros.MacroTagParser">
            <summary>
            Parses the macro syntax in a string and renders out it's contents
            </summary>
        </member>
        <member name="M:Umbraco.Core.Macros.MacroTagParser.ParseMacros(System.String,System.Action{System.String},System.Action{System.String,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            This will accept a text block and seach/parse it for macro markup.
            When either a text block or a a macro is found, it will call the callback method.
            </summary>
            <param name="text"> </param>
            <param name="textFoundCallback"></param>
            <param name="macroFoundCallback"></param>
            <returns></returns>
            <remarks>
            This method  simply parses the macro contents, it does not create a string or result, 
            this is up to the developer calling this method to implement this with the callbacks.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Mandate">
            <summary>
            Helper class for mandating values, for example on method parameters.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNull``1(``0,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNullOrEmpty(System.String,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null or whitespace.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Mandates that the specified sequence is not null and has at least one element.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="paramName">Name of the param.</param>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterCondition(System.Boolean,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the param.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.ParameterCondition(System.Boolean,System.String,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the param.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.That``1(System.Boolean)">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="M:Umbraco.Core.Mandate.That``1(System.Boolean,System.Func{``0})">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <param name="defer">Deffered expression to call if the exception should be raised.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="T:Umbraco.Core.Models.Content">
            <summary>
            Represents a Content object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContent">
            <summary>
            Defines a Content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangeContentType(Umbraco.Core.Models.IContentType)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IContentType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangeContentType(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Changes the <see cref="T:Umbraco.Core.Models.IContentType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.IContent.ChangePublishedState(Umbraco.Core.Models.PublishedState)">
            <summary>
            Changes the Published state of the content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Template">
            <summary>
            Gets or sets the template used by the Content.
            This is used to override the default one from the ContentType.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Published">
            <summary>
            Boolean indicating whether the Content is Published or not
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Language">
            <summary>
            Language of the data contained within this Content object.
            </summary>
            <remarks>
            Left internal until multilingual support is implemented.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ReleaseDate">
            <summary>
            Gets or Sets the date the Content should be released and thus be published
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ExpireDate">
            <summary>
            Gets or Sets the date the Content should expire and thus be unpublished
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.WriterId">
            <summary>
            Id of the user who wrote/updated the Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContent.Status">
            <summary>
            Gets the current status of the Content
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,Umbraco.Core.Models.IContent,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.#ctor(System.String,System.Int32,Umbraco.Core.Models.IContentType,Umbraco.Core.Models.PropertyCollection)">
            <summary>
            Constructor for creating a Content object
            </summary>
            <param name="name">Name of the content</param>
            <param name="parentId">Id of the Parent content</param>
            <param name="contentType">ContentType for the current Content object</param>
            <param name="properties">Collection of properties</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType)">
            <summary>
            Changes the <see cref="P:Umbraco.Core.Models.Content.ContentType"/> for the current content object
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <remarks>Leaves PropertyTypes intact after change</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeContentType(Umbraco.Core.Models.IContentType,System.Boolean)">
            <summary>
            Changes the <see cref="P:Umbraco.Core.Models.Content.ContentType"/> for the current content object and removes PropertyTypes,
            which are not part of the new ContentType.
            </summary>
            <param name="contentType">New ContentType for this content</param>
            <param name="clearProperties">Boolean indicating whether to clear PropertyTypes upon change</param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangePublishedState(Umbraco.Core.Models.PublishedState)">
            <summary>
            Changes the Published state of the content object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ChangeTrashedState(System.Boolean,System.Int32)">
            <summary>
            Changes the Trashed state of the content object
            </summary>
            <param name="isTrashed">Boolean indicating whether content is trashed (true) or not trashed (false)</param>
            <param name="parentId"> </param>
        </member>
        <member name="M:Umbraco.Core.Models.Content.Clone">
            <summary>
            Creates a clone of the current entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.Content.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current <see cref="T:Umbraco.Core.Models.IContent"/> entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Content.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Content.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.Content.UpdatingEntity">
            <summary>
            Method to call when Entity is being updated
            </summary>
            <remarks>Modified Date is set and a new Version guid is set</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Template">
            <summary>
            Gets or sets the template used by the Content.
            This is used to override the default one from the ContentType.
            </summary>
            <remarks>
            If no template is explicitly set on the Content object, 
            the Default template from the ContentType will be returned.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Status">
            <summary>
            Gets the current status of the Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Published">
            <summary>
            Boolean indicating whether this Content is Published or not
            </summary>
            <remarks>Setting Published to true/false should be private or internal</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.Language">
            <summary>
            Language of the data contained within this Content object.
            </summary>
            <remarks>
            Left internal until multilingual support is implemented.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ReleaseDate">
            <summary>
            The date this Content should be released and thus be published
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ExpireDate">
            <summary>
            The date this Content should expire and thus be unpublished
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.WriterId">
            <summary>
            Id of the user who wrote/updated this Content
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Content.NodeName">
            <summary>
            Name of the Node (non-localized).
            </summary>
            <remarks>
            This Property is kept internal until localization is introduced.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Content.ContentType">
            <summary>
            Gets the ContentType used by this content object
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentStatus">
            <summary>
            Enum for the various statuses a Content object can have
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.ContentType">
            <summary>
            Represents the content type that a <see cref="T:Umbraco.Core.Models.Content"/> object is based on
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IContentType">
            <summary>
            Defines a ContentType, which Content is based on
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.IContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.DefaultTemplate">
            <summary>
            Gets the default Template of the ContentType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.SetDefaultTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Sets the default template for the ContentType
            </summary>
            <param name="template">Default <see cref="T:Umbraco.Core.Models.ITemplate"/></param>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.RemoveTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Removes a template from the list of allowed templates
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to remove</param>
            <returns>True if template was removed, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current <see cref="T:Umbraco.Core.Models.IContent"/> entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
            <remarks>
            Please note that resetting the dirty properties could potentially
            obstruct the saving of a new or updated entity.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.AddingEntity">
            <summary>
            Method to call when Entity is being saved
            </summary>
            <remarks>Created date is set and a Unique key is assigned</remarks>
        </member>
        <member name="M:Umbraco.Core.Models.ContentType.UpdatingEntity">
            <summary>
            Method to call when Entity is being updated
            </summary>
            <remarks>Modified Date is set and a new Version guid is set</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplate">
            <summary>
            Gets or sets the alias of the default Template.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.DefaultTemplateId">
            <summary>
            Internal property to store the Id of the default template
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.ContentType.AllowedTemplates">
            <summary>
            Gets or Sets a list of Templates which are allowed for the ContentType
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.DataTypeDatabaseType">
            <summary>
            Enum of the various DbTypes for which the Property values are stored
            </summary>
            <remarks>
            Object is added to support complex values from PropertyEditors, 
            but will be saved under the Ntext column.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.DataTypeDefinition">
            <summary>
            Definition of a DataType/PropertyEditor
            </summary>
            <remarks>
            The definition exists as a database reference between an actual DataType/PropertyEditor 
            (identified by its control id), its prevalues (configuration) and the named DataType in the backoffice UI.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.ParentId">
            <summary>
            Gets or sets the Id of the Parent entity
            </summary>
            <remarks>Might not be necessary if handled as a relation?</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Name">
            <summary>
            Gets or sets the name of the current entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.SortOrder">
            <summary>
            Gets or sets the sort order of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Level">
            <summary>
            Gets or sets the level of the content entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Path">
            <summary>
            Gets or sets the path
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.CreatorId">
            <summary>
            Id of the user who created this entity
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.Trashed">
            <summary>
            Boolean indicating whether this entity is Trashed or not.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.ControlId">
            <summary>
            Id of the DataType control
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.DataTypeDefinition.DatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacro">
            <summary>
            Defines a Macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.IMacro.MacroType">
            <summary>
            Returns an enum <see cref="T:Umbraco.Core.Models.MacroTypes"/> based on the properties on the Macro
            </summary>
            <returns><see cref="T:Umbraco.Core.Models.MacroTypes"/></returns>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.ScriptFile">
            <summary>
            Gets or sets the path to the script file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.ScriptAssembly">
            <summary>
            Gets or sets the name of the assembly, which should be used by the Macro
            </summary>
            <remarks>Will usually only be filled if the ScriptFile is a Usercontrol</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Python">
            <summary>
            Gets or set the path to the Python file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Xslt">
            <summary>
            Gets or sets the path to the Xslt file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IMacro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IMacroProperty">
            <summary>
            Defines a Property for a Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.IMacroProperty.PropertyType">
            <summary>
            Gets or sets the Type for this Property
            </summary>
            <remarks>
            The MacroPropertyTypes acts as a plugin for Macros.
            All types was previously contained in the database, but has been ported to code.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.Macro">
            <summary>
            Represents a Macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.AddingEntity">
            <summary>
            Overridden this method in order to set a random Id
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Macro.MacroType">
            <summary>
            Returns an enum <see cref="T:Umbraco.Core.Models.MacroTypes"/> based on the properties on the Macro
            </summary>
            <returns><see cref="T:Umbraco.Core.Models.MacroTypes"/></returns>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Alias">
            <summary>
            Gets or sets the alias of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Name">
            <summary>
            Gets or sets the name of the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.UseInEditor">
            <summary>
            Gets or sets a boolean indicating whether the Macro can be used in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheDuration">
            <summary>
            Gets or sets the Cache Duration for the Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByPage">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached by Page
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.CacheByMember">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be Cached Personally
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.DontRender">
            <summary>
            Gets or sets a boolean indicating whether the Macro should be rendered in an Editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.ScriptFile">
            <summary>
            Gets or sets the path to the script file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.ScriptAssembly">
            <summary>
            Gets or sets the name of the assembly, which should be used by the Macro
            </summary>
            <remarks>Will usually only be filled if the ScriptFile is a Usercontrol</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Python">
            <summary>
            Gets or set the path to the Python file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Xslt">
            <summary>
            Gets or sets the path to the Xslt file in use
            </summary>
            <remarks>Optional: Can only be one of three Script, Python or Xslt</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Macro.Properties">
            <summary>
            Gets or sets a list of Macro Properties
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MacroProperty">
            <summary>
            Represents a Macro Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Alias">
            <summary>
            Gets or sets the Alias of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.Name">
            <summary>
            Gets or sets the Name of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.MacroProperty.PropertyType">
            <summary>
            Gets or sets the Type for this Property
            </summary>
            <remarks>
            The MacroPropertyTypes acts as a plugin for Macros.
            All types was previously contained in the database, but has been ported to code.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.MacroPropertyTypeBaseTypes">
            <summary>
            Enum for the three allowed BaseTypes
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.MacroTypes">
            <summary>
            Enum for the various types of Macros
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.Property">
            <summary>
            A Property contains a single piece of data
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.Property.IsValid">
            <summary>
            Boolean indicating whether the current value is valid
            </summary>
            <remarks>
            A valid value implies that it is ready for publishing.
            Invalid property values can be saved, but not published.
            </remarks>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.Property.IsValid(System.Object)">
            <summary>
            Boolean indicating whether the passed in value is valid
            </summary>
            <param name="value"></param>
            <returns>True is property value is valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Alias">
            <summary>
            Returns the Alias of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyTypeId">
            <summary>
            Returns the Id of the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.DataTypeDatabaseType">
            <summary>
            Returns the DatabaseType that the underlaying DataType is using to store its values
            </summary>
            <remarks>Only used internally when saving the property value</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.PropertyType">
            <summary>
            Returns the PropertyType, which this Property is based on
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Version">
            <summary>
            Gets or Sets the version id for the Property
            </summary>
            <remarks>
            The version will be the same for all Property objects in a collection on a Content 
            object, so not sure how much this makes sense but adding it to align with:
            umbraco.interfaces.IProperty
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.Property.Value">
            <summary>
            Gets or Sets the value of the Property
            </summary>
            <remarks>
            Setting the value will trigger a type validation. 
            The type of the value has to be valid in order to be saved.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyCollection">
            <summary>
            Represents a Collection of <see cref="T:Umbraco.Core.Models.Property"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.#ctor(System.Func{Umbraco.Core.Models.Property,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Models.PropertyCollection"/> class with a delegate responsible for validating the addition of <see cref="T:Umbraco.Core.Models.Property"/> instances.
            </summary>
            <param name="validationCallback">The validation callback.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.Property})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.Property"/> instances referenced in the <paramref name="properties"/> parameter, whilst maintaining
            any validation delegates such as <see cref="P:Umbraco.Core.Models.PropertyCollection.ValidateAdd"/>
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.Property"/> whose alias matches the specified PropertyType.
            </summary>
            <param name="propertyTypeAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsurePropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection contains Properties for the passed in PropertyTypes
            </summary>
            <param name="propertyTypes">List of PropertyType</param>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyCollection.EnsureCleanPropertyTypes(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Ensures that the collection is cleared from PropertyTypes not in the list of passed in PropertyTypes
            </summary>
            <param name="propertyTypes">List of PropertyType</param>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyCollection.Item(Umbraco.Core.Models.PropertyType)">
            <summary>
            Gets the element with the specified PropertyType.
            </summary>
            
            <returns>
            The element with the specified PropertyType. If an element with the specified PropertyType is not found, an exception is thrown.
            </returns>
            <param name="propertyType">The PropertyType of the element to get.</param><exception cref="T:System.ArgumentNullException"><paramref name="propertyType"/> is null.</exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">An element with the specified key does not exist in the collection.</exception>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroup">
            <summary>
            A group of property types, which corresponds to the properties grouped under a Tab.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroup.SetLazyParentId(System.Lazy{System.Nullable{System.Int32}})">
            <summary>
            Sets the ParentId from the lazy integer id
            </summary>
            <param name="id">Id of the Parent</param>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.Name">
            <summary>
            Gets or sets the Name of the Group, which corresponds to the Tab-name in the UI
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.ParentId">
            <summary>
            Gets or sets the Id of the Parent PropertyGroup.
            </summary>
            <remarks>
            A Parent PropertyGroup corresponds to an inherited PropertyGroup from a composition.
            If a PropertyType is inserted into an inherited group then a new group will be created with an Id reference to the parent.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.SortOrder">
            <summary>
            Gets or sets the Sort Order of the Group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyGroup.PropertyTypes">
            <summary>
            Gets or sets a collection of PropertyTypes for this PropertyGroup
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyGroupCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyGroup"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyGroup})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyGroup"/> instances referenced in the <paramref name="groups"/> parameter.
            </summary>
            <param name="groups">The property groups.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyGroupCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.PropertyGroup"/> whose name matches the specified parameter.
            </summary>
            <param name="groupName">Name of the PropertyGroup.</param>
            <returns><c>true</c> if the collection contains the specified name; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyType">
            <summary>
            Defines the type of a <see cref="T:Umbraco.Core.Models.Property"/> object
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromRawValue(System.Object,System.Guid,System.Int32)">
            <summary>
            Create a new Property object from a "raw" database value.
            </summary>
            <remarks>Can be used for the "old" values where no serialization type exists</remarks>
            <param name="value"></param>
            <param name="version"> </param>
            <param name="id"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromRawValue(System.Object,System.String)">
            <summary>
            Create a new Property object from a "raw" database value.
            In some cases the value will need to be deserialized.
            </summary>
            <param name="value"></param>
            <param name="serializationType"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.CreatePropertyFromValue(System.Object)">
            <summary>
            Create a new Property object that conforms to the Type of the DataType
            and can be validated according to DataType validation / Mandatory-check.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsPropertyTypeValid(System.Object)">
            <summary>
            Validates the Value from a Property according to its type
            </summary>
            <param name="value"></param>
            <returns>True if valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyType.IsPropertyValueValid(System.Object)">
            <summary>
            Validates the Value from a Property according to the validation settings
            </summary>
            <param name="value"></param>
            <returns>True if valid, otherwise false</returns>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Name">
            <summary>
            Gets of Sets the Name of the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Alias">
            <summary>
            Gets of Sets the Alias of the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Description">
            <summary>
            Gets of Sets the Description for the PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeDefinitionId">
            <summary>
            Gets of Sets the Id of the DataType (Definition), which the PropertyType is "wrapping"
            </summary>
            <remarks>This is actually the Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeId">
            <summary>
            Gets of Sets the Id of the DataType control
            </summary>
            <remarks>This is the Id of the actual DataType control</remarks>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.DataTypeDatabaseType">
            <summary>
            Gets or Sets the DatabaseType for which the DataType's value is saved as
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.PropertyGroupId">
            <summary>
            Gets or Sets the PropertyGroup's Id for which this PropertyType belongs
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.Mandatory">
            <summary>
            Gets of Sets the Boolean indicating whether a value for this PropertyType is required
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.HelpText">
            <summary>
            Gets of Sets the Help text for the current PropertyType
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.SortOrder">
            <summary>
            Gets of Sets the Sort order of the PropertyType, which is used for sorting within a group
            </summary>
        </member>
        <member name="P:Umbraco.Core.Models.PropertyType.ValidationRegExp">
            <summary>
            Gets or Sets the RegEx for validation of legacy DataTypes
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.PropertyTypeCollection">
            <summary>
            Represents a collection of <see cref="T:Umbraco.Core.Models.PropertyType"/> objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Reset(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.PropertyType})">
            <summary>
            Resets the collection to only contain the <see cref="T:Umbraco.Core.Models.PropertyType"/> instances referenced in the <paramref name="properties"/> parameter.
            </summary>
            <param name="properties">The properties.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Models.PropertyTypeCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="T:Umbraco.Core.Models.Property"/> whose alias matches the specified PropertyType.
            </summary>
            <param name="propertyAlias">Alias of the PropertyType.</param>
            <returns><c>true</c> if the collection contains the specified alias; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.WeightedPluginAttribute">
            <summary>
            Some many object resolvers require that the objects that they resolve have weights applied to them so that
            the objects are returned in a sorted order, this attribute is used in these scenarios.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyEditorValueConverter.IsConverterFor(System.Guid,System.String,System.String)">
            <summary>
            Returns true if this converter can perform the value conversion for the specified property editor id
            </summary>
            <param name="propertyEditorId"></param>
            <param name="docTypeAlias"> </param>
            <param name="propertyTypeAlias"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.IPropertyEditorValueConverter.ConvertPropertyValue(System.Object)">
            <summary>
            Attempts to convert the value specified into a useable value on the front-end
            </summary>
            <param name="value"></param>
            <returns></returns>
            <remarks>
            This is used to convert the value stored in the repository into a usable value on the front-end.
            For example, if a 0 or 1 is stored for a boolean, we'd want to convert this to a real boolean.
            
            Also note that the value might not come in as a 0 or 1 but as a "0" or "1"
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.DatePickerPropertyEditorValueConverter.ConvertPropertyValue(System.Object)">
            <summary>
            return a DateTime object even if the value is a string
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Dynamics.PropertyResult.ValueAsString">
            <summary>
            Returns the value as a string output, this is used in the final rendering process of a property
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dynamics.PropertyResult.DocumentId">
            <summary>
            The Id of the document for which this property belongs to
            </summary>
        </member>
        <member name="P:Umbraco.Core.Dynamics.PropertyResult.DocumentTypeAlias">
            <summary>
            The alias of the document type alias for which this property belongs to
            </summary>
        </member>
        <member name="T:Umbraco.Core.Models.IPublishedContent">
            <summary>
            Defines a published item in Umbraco
            </summary>
            <remarks>
            A replacement for INode which needs to occur since INode doesn't contain the document type alias
            and INode is poorly formatted with mutable properties (i.e. Lists instead of IEnumerable)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Models.IPublishedContent.GetProperty(System.String)">
            <summary>
            Returns a property on the object based on an alias
            </summary>
            <param name="alias"></param>
            <returns></returns>
            <remarks>
            Although we do have a a property to return Properties of the object, in some cases a custom implementation may not know
            about all properties until specifically asked for one by alias. 
            
            This method is mostly used in places such as DynamicPublishedContent when trying to resolve a property based on an alias. 
            In some cases Pulish Stores, a property value may exist in multiple places and we need to fallback to different cached locations
            therefore sometimes the 'Properties' collection may not be sufficient.
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Models.IPublishedContent.Item(System.String)">
            <summary>
            Returns the property value for the property alias specified
            </summary>
            <param name="propertyAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.ActionsResolver">
            <summary>
            A resolver to return all IAction objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.ActionsResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="packageActions"></param>		
        </member>
        <member name="P:Umbraco.Core.ActionsResolver.Actions">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IPackageAction"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.CacheRefreshersResolver">
            <summary>
            A resolver to return all ICacheRefresher objects
            </summary>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2">
            <summary>
            A base resolver used for old legacy factories such as the DataTypeFactory or CacheResolverFactory.
            </summary>
            <typeparam name="TResolver"></typeparam>
            <typeparam name="TResolved"> </typeparam>
            <remarks>
            This class contains basic functionality to mimic the functionality in these old factories since they all return 
            transient objects (though this should be changed) and the method GetById needs to lookup a type to an ID and since 
            these old classes don't contain metadata, the objects need to be instantiated first to get their metadata, we then store this
            for use in the GetById method.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="types"></param>
            <remarks>
            We are creating Transient instances (new instances each time) because this is how the legacy code worked and
            I don't want to muck anything up by changing them to application based instances. 
            TODO: However, it would make much more sense to do this and would speed up the application plus this would make the GetById method much easier.
            </remarks>
        </member>
        <member name="F:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2._trackIdToType">
            <summary>
            Maintains a list of Ids and their types when first call to CacheResolvers or GetById occurs, this is used
            in order to return a single object by id without instantiating the entire type stack.
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.GetUniqueIdentifier(`1)">
            <summary>
            method to return the unique id for type T
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.GetById(System.Guid)">
            <summary>
            Returns a new TResolved instance by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.LegacyTransientObjectsResolver`2.EnsureIdsAreTracked">
            <summary>
            Populates the ids -> Type dictionary to allow us to instantiate a type by Id since these legacy types doesn't contain any metadata
            </summary>
        </member>
        <member name="M:Umbraco.Core.CacheRefreshersResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="refreshers"></param>		
        </member>
        <member name="P:Umbraco.Core.CacheRefreshersResolver.CacheResolvers">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.ICacheRefresher"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Configuration.GlobalSettings">
            <summary>
            The GlobalSettings Class contains general settings information for the entire Umbraco instance based on information from  web.config appsettings 
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.ResetCache">
            <summary>
            used for unit tests
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.SaveSetting(System.String,System.String)">
            <summary>
            Saves a setting into the configuration file.
            </summary>
            <param name="key">Key of the setting to be saved.</param>
            <param name="value">Value of the setting to be saved.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.RemoveSetting(System.String)">
            <summary>
            Removes a setting from the configuration file.
            </summary>
            <param name="key">Key of the setting to be removed.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.RequestIsInUmbracoApplication(System.Web.HttpContext)">
            <summary>
            Requests the is in umbraco application directory structure.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.IsReservedPathOrUrl(System.String,System.Web.HttpContextBase,System.Web.Routing.RouteCollection)">
            <summary>
            Determines whether the current request is reserved based on the route table and 
            whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url"></param>
            <param name="httpContext"></param>
            <param name="routes">The route collection to lookup the request in</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.IsReservedPathOrUrl(System.String)">
            <summary>
            Determines whether the specified URL is reserved or is inside a reserved path.
            </summary>
            <param name="url">The URL to check.</param>
            <returns>
            	<c>true</c> if the specified URL is reserved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedUrls">
            <summary>
            Gets the reserved urls from web.config.
            </summary>
            <value>The reserved urls.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ReservedPaths">
            <summary>
            Gets the reserved paths from web.config
            </summary>
            <value>The reserved paths.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ContentXmlFile">
            <summary>
            Gets the name of the content XML file.
            </summary>
            <value>The content XML.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.StorageDirectory">
            <summary>
            Gets the path to the storage directory (/data by default).
            </summary>
            <value>The storage directory.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.Path">
            <summary>
            Gets the path to umbraco's root directory (/umbraco by default).
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UmbracoMvcArea">
            <summary>
            This returns the string of the MVC Area route.
            </summary>
            <remarks>
            THIS IS TEMPORARY AND SHOULD BE REMOVED WHEN WE MIGRATE/UPDATE THE CONFIG SETTINGS TO BE A REAL CONFIG SECTION
            AND SHOULD PROBABLY BE HANDLED IN A MORE ROBUST WAY.
            
            This will return the MVC area that we will route all custom routes through like surface controllers, etc...
            We will use the 'Path' (default ~/umbraco) to create it but since it cannot contain '/' and people may specify a path of ~/asdf/asdf/admin
            we will convert the '/' to '-' and use that as the path. its a bit lame but will work.
            
            We also make sure that the virtual directory (SystemDirectories.Root) is stripped off first, otherwise we'd end up with something
            like "MyVirtualDirectory-Umbraco" instead of just "Umbraco".
            </remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ClientPath">
            <summary>
            Gets the path to umbraco's client directory (/umbraco_client by default).
            This is a relative path to the Umbraco Path as it always must exist beside the 'umbraco'
            folder since the CSS paths to images depend on it.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DbDsn">
            <summary>
            Gets the database connection string
            </summary>
            <value>The database connection string.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ConfigurationStatus">
            <summary>
            Gets or sets the configuration status. This will return the version number of the currently installed umbraco instance.
            </summary>
            <value>The configuration status.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.FullpathToRoot">
            <summary>
            Gets the full path to root.
            </summary>
            <value>The fullpath to root.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DebugMode">
            <summary>
            Gets a value indicating whether umbraco is running in [debug mode].
            </summary>
            <value><c>true</c> if [debug mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.Configured">
            <summary>
            Gets a value indicating whether the current version of umbraco is configured.
            </summary>
            <value><c>true</c> if configured; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.TimeOutInMinutes">
            <summary>
            Gets the time out in minutes.
            </summary>
            <value>The time out in minutes.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UseDirectoryUrls">
            <summary>
            Gets a value indicating whether umbraco uses directory urls.
            </summary>
            <value><c>true</c> if umbraco uses directory urls; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionCheckPeriod">
            <summary>
            Returns a string value to determine if umbraco should skip version-checking.
            </summary>
            <value>The version check period in days (0 = never).</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DisableXsltExtensions">
            <summary>
            Returns a string value to determine if umbraco should disbable xslt extensions
            </summary>
            <value><c>"true"</c> if version xslt extensions are disabled, otherwise, <c>"false"</c></value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.EditXhtmlMode">
            <summary>
            Returns a string value to determine if umbraco should use Xhtml editing mode in the wysiwyg editor
            </summary>
            <value><c>"true"</c> if Xhtml mode is enable, otherwise, <c>"false"</c></value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.DefaultUILanguage">
            <summary>
            Gets the default UI language.
            </summary>
            <value>The default UI language.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.ProfileUrl">
            <summary>
            Gets the profile URL.
            </summary>
            <value>The profile URL.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.HideTopLevelNodeFromPath">
            <summary>
            Gets a value indicating whether umbraco should hide top level nodes from generated urls.
            </summary>
            <value>
            	<c>true</c> if umbraco hides top level nodes from urls; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.CurrentVersion">
            <summary>
            Gets the current version.
            </summary>
            <value>The current version.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionMajor">
            <summary>
            Gets the major version number.
            </summary>
            <value>The major version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionMinor">
            <summary>
            Gets the minor version number.
            </summary>
            <value>The minor version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionPatch">
            <summary>
            Gets the patch version number.
            </summary>
            <value>The patch version number.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.VersionComment">
            <summary>
            Gets the version comment (like beta or RC).
            </summary>
            <value>The version comment.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.UseSSL">
            <summary>
            Gets a value indicating whether umbraco should force a secure (https) connection to the backoffice.
            </summary>
            <value><c>true</c> if [use SSL]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.GlobalSettings.License">
            <summary>
            Gets the umbraco license.
            </summary>
            <value>The license.</value>
        </member>
        <member name="T:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer">
            <summary>
            Structure that checks in logarithmic time
            if a given string starts with one of the added keys.
            </summary>
        </member>
        <member name="F:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer._list">
            <summary>Internal sorted list of keys.</summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.Add(System.String)">
            <summary>
            Adds the specified new key.
            </summary>
            <param name="newKey">The new key.</param>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.StartsWith(System.String)">
            <summary>
            Checks if the given string starts with any of the added keys.
            </summary>
            <param name="target">The target.</param>
            <returns>true if a key is found that matches the start of target</returns>
            <remarks>
            Runs in O(s*log(n)), with n the number of keys and s the length of target.
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.StartsWithComparator">
            <summary>Comparator that tests if a string starts with another.</summary>
            <remarks>Not a real comparator, since it is not reflexive. (x==y does not imply y==x)</remarks>
        </member>
        <member name="F:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.StartsWithComparator._stringComparer">
            <summary>Default string comparer.</summary>
        </member>
        <member name="F:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.StartsWithComparator.Instance">
            <summary>Gets an instance of the StartsWithComparator.</summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.GlobalSettings.StartsWithContainer.StartsWithComparator.Compare(System.String,System.String)">
            <summary>
            Tests if whole begins with all characters of part.
            </summary>
            <param name="part">The part.</param>
            <param name="whole">The whole.</param>
            <returns>
            Returns 0 if whole starts with part, otherwise performs standard string comparison.
            </returns>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoSettings">
            <summary>
            The UmbracoSettings Class contains general settings information for the entire Umbraco instance based on information from the /config/umbracoSettings.config file
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.ResetSetters">
            <summary>
            Used in unit testing to reset all config items that were set with property setters (i.e. did not come from config)
            </summary>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.GetKeyAsNode(System.String)">
            <summary>
            Selects a xml node in the umbraco settings config file.
            </summary>
            <param name="key">The xpath query to the specific node.</param>
            <returns>If found, it returns the specific configuration xml node.</returns>
        </member>
        <member name="M:Umbraco.Core.Configuration.UmbracoSettings.GetKey(System.String)">
            <summary>
            Gets the value of configuration xml node with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UmbracoSettingsXmlDoc">
            <summary>
            Gets the umbraco settings document.
            </summary>
            <value>The _umbraco settings.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.SettingsFilePath">
            <summary>
            Gets/sets the settings file path, the setter can be used in unit tests
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UploadAllowDirectories">
            <summary>
            Gets a value indicating whether the media library will create new directories in the /media directory.
            </summary>
            <value>
            	<c>true</c> if new directories are allowed otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableBaseRestHandler">
            <summary>
            THIS IS TEMPORARY until we fix up settings all together, this setting is actually not 'settable' but is
            here for future purposes since we check for thsi settings in the module.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.BootSplashPage">
            <summary>
            THIS IS TEMPORARY until we fix up settings all together, this setting is actually not 'settable' but is
            here for future purposes since we check for thsi settings in the module.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableLogging">
            <summary>
            Gets a value indicating whether logging is enabled in umbracoSettings.config (/settings/logging/enableLogging).
            </summary>
            <value><c>true</c> if logging is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableAsyncLogging">
            <summary>
            Gets a value indicating whether logging happens async.
            </summary>
            <value><c>true</c> if async logging is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ExternalLoggerAssembly">
            <summary>
            Gets the assembly of an external logger that can be used to store log items in 3rd party systems
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ExternalLoggerType">
            <summary>
            Gets the type of an external logger that can be used to store log items in 3rd party systems
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ExternalLoggerLogAuditTrail">
            <summary>
            Long Audit Trail to external log too
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.KeepUserLoggedIn">
            <summary>
            Keep user alive as long as they have their browser open? Default is true
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableCanvasEditing">
            <summary>
            Enables the experimental canvas (live) editing on the frontend of the website
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.HideDisabledUsersInBackoffice">
            <summary>
            Show disabled users in the tree in the Users section in the backoffice
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.AutoCleanLogs">
            <summary>
            Gets a value indicating whether the logs will be auto cleaned
            </summary>
            <value><c>true</c> if logs are to be automatically cleaned; otherwise, <c>false</c></value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.CleaningMiliseconds">
            <summary>
            Gets the value indicating the log cleaning frequency (in miliseconds)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.DisabledLogTypes">
            <summary>
            Gets the disabled log types.
            </summary>
            <value>The disabled log types.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.PackageServer">
            <summary>
            Gets the package server url.
            </summary>
            <value>The package server url.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UseDomainPrefixes">
            <summary>
            Gets a value indicating whether umbraco will use domain prefixes.
            </summary>
            <value><c>true</c> if umbraco will use domain prefixes; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.AddTrailingSlash">
            <summary>
            This will add a trailing slash (/) to urls when in directory url mode
            NOTICE: This will always return false if Directory Urls in not active
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UseAspNetMasterPages">
            <summary>
            Gets a value indicating whether umbraco will use ASP.NET MasterPages for rendering instead of its propriatary templating system.
            </summary>
            <value><c>true</c> if umbraco will use ASP.NET MasterPages; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableTemplateFolders">
            <summary>
            Gets a value indicating whether umbraco will attempt to load any skins to override default template files
            </summary>
            <value><c>true</c> if umbraco will override templates with skins if present and configured <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.NotDynamicXmlDocumentElements">
            <summary>
            razor DynamicNode typecasting detects XML and returns DynamicXml - Root elements that won't convert to DynamicXml
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.CloneXmlCacheOnPublish">
            <summary>
            Gets a value indicating whether umbraco will clone XML cache on publish.
            </summary>
            <value>
            	<c>true</c> if umbraco will clone XML cache on publish; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.TidyEditorContent">
            <summary>
            Gets a value indicating whether rich text editor content should be parsed by tidy.
            </summary>
            <value><c>true</c> if content is parsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.TidyCharEncoding">
            <summary>
            Gets the encoding type for the tidyied content.
            </summary>
            <value>The encoding type as string.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.PropertyContextHelpOption">
            <summary>
            Gets the property context help option, this can either be 'text', 'icon' or 'none'
            </summary>
            <value>The property context help option.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ForceSafeAliases">
            <summary>
            Whether to force safe aliases (no spaces, no special characters) at businesslogic level on contenttypes and propertytypes
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.TrySkipIisCustomErrors">
            <summary>
            Gets or sets a value indicating where to try to skip IIS custom errors.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.DisallowedUploadFiles">
            <summary>
            File types that will not be allowed to be uploaded via the content/media upload control
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ImageFileTypes">
            <summary>
            Gets the allowed image file types.
            </summary>
            <value>The allowed image file types.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ScriptFileTypes">
            <summary>
            Gets the allowed script file types.
            </summary>
            <value>The allowed script file types.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UmbracoLibraryCacheDuration">
            <summary>
            Gets the duration in seconds to cache queries to umbraco library member and media methods
            Default is 1800 seconds (30 minutes)
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ScriptFolderPath">
            <summary>
            Gets the path to the scripts folder used by the script editor.
            </summary>
            <value>The script folder path.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ScriptDisableEditor">
            <summary>
            Enabled or disable the script/code editor
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnsureUniqueNaming">
            <summary>
            Gets a value indicating whether umbraco will ensure unique node naming.
            This will ensure that nodes cannot have the same url, but will add extra characters to a url.
            ex: existingnodename.aspx would become existingnodename(1).aspx if a node with the same name is found 
            </summary>
            <value><c>true</c> if umbraco ensures unique node naming; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.NotificationEmailSender">
            <summary>
            Gets the notification email sender.
            </summary>
            <value>The notification email sender.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.NotificationDisableHtmlEmail">
            <summary>
            Gets a value indicating whether notification-emails are HTML.
            </summary>
            <value>
            	<c>true</c> if html notification-emails are disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ImageAllowedAttributes">
            <summary>
            Gets the allowed attributes on images.
            </summary>
            <value>The allowed attributes on images.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ScheduledTasks">
            <summary>
            Gets the scheduled tasks as XML
            </summary>
            <value>The scheduled tasks.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UrlReplaceCharacters">
            <summary>
            Gets a list of characters that will be replaced when generating urls
            </summary>
            <value>The URL replacement characters.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.RemoveDoubleDashesFromUrlReplacing">
            <summary>
            Whether to replace double dashes from url (ie my--story----from--dash.aspx caused by multiple url replacement chars
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UseDistributedCalls">
            <summary>
            Gets a value indicating whether umbraco will use distributed calls.
            This enables umbraco to share cache and content across multiple servers.
            Used for load-balancing high-traffic sites.
            </summary>
            <value><c>true</c> if umbraco uses distributed calls; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.DistributedCallUser">
            <summary>
            Gets the ID of the user with access rights to perform the distributed calls.
            </summary>
            <value>The distributed call user.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.PreviewBadge">
            <summary>
            Gets the html injected into a (x)html page if Umbraco is running in preview mode
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.DistributionServers">
            <summary>
            Gets IP or hostnames of the distribution servers.
            These servers will receive a call everytime content is created/deleted/removed
            and update their content cache accordingly, ensuring a consistent cache on all servers
            </summary>
            <value>The distribution servers.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.HelpPages">
            <summary>
            Gets HelpPage configurations.
            A help page configuration specify language, user type, application, application url and 
            the target help page url.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.Repositories">
            <summary>
            Gets all repositories registered, and returns them as XmlNodes, containing name, alias and webservice url.
            These repositories are used by the build-in package installer and uninstaller to install new packages and check for updates.
            All repositories should have a unique alias.
            All packages installed from a repository gets the repository alias included in the install information
            </summary>
            <value>The repository servers.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UseViewstateMoverModule">
            <summary>
            Gets a value indicating whether umbraco will use the viewstate mover module.
            The viewstate mover will move all asp.net viewstate information to the bottom of the aspx page
            to ensure that search engines will index text instead of javascript viewstate information.
            </summary>
            <value>
            	<c>true</c> if umbraco will use the viewstate mover module; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.IsXmlContentCacheDisabled">
            <summary>
            Tells us whether the Xml Content cache is disabled or not
            Default is enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.XmlContentCheckForDiskChanges">
            <summary>
            Check if there's changes to the umbraco.config xml file cache on disk on each request
            Makes it possible to updates environments by syncing the umbraco.config file across instances
            Relates to http://umbraco.codeplex.com/workitem/30722
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableGlobalPreviewStorage">
            <summary>
            If this is enabled, all Umbraco objects will generate data in the preview table (cmsPreviewXml).
            If disabled, only documents will generate data.
            This feature is useful if anyone would like to see how data looked at a given time
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.UseLegacyXmlSchema">
            <summary>
            Whether to use the new 4.1 schema or the old legacy schema
            </summary>
            <value>
            	<c>true</c> if yes, use the old node/data model; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.ContinouslyUpdateXmlDiskCache">
            <summary>
            Tells us whether the Xml to always update disk cache, when changes are made to content
            Default is enabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.EnableSplashWhileLoading">
            <summary>
            Tells us whether to use a splash page while umbraco is initializing content. 
            If not, requests are queued while umbraco loads content. For very large sites (+10k nodes) it might be usefull to 
            have a splash page
            Default is disabled
            </summary>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.DefaultRenderingEngine">
            <summary>
            Enables MVC, and at the same time disable webform masterpage templates.
            This ensure views are automaticly created instead of masterpages.
            Views are display in the tree instead of masterpages and a MVC template editor
            is used instead of the masterpages editor
            </summary>
            <value><c>true</c> if umbraco defaults to using MVC views for templating, otherwise <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.MacroErrorBehaviour">
            <summary>
            This configuration setting defines how to handle macro errors:
            - Inline - Show error within macro as text (default and current Umbraco 'normal' behavior)
            - Silent - Suppress error and hide macro
            - Throw  - Throw an exception and invoke the global error handler (if one is defined, if not you'll get a YSOD)
            </summary>
            <value>MacroErrorBehaviour enum defining how to handle macro errors.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.IconPickerBehaviour">
            <summary>
            This configuration setting defines how to show icons in the document type editor. 
            - ShowDuplicates       - Show duplicates in files and sprites. (default and current Umbraco 'normal' behaviour)
            - HideSpriteDuplicates - Show files on disk and hide duplicates from the sprite
            - HideFileDuplicates   - Show files in the sprite and hide duplicates on disk
            </summary>
            <value>MacroErrorBehaviour enum defining how to show icons in the document type editor.</value>
        </member>
        <member name="T:Umbraco.Core.Configuration.UmbracoSettings.WebServices">
            <summary>
            Configuration regarding webservices
            </summary>
            <remarks>Put in seperate class for more logik/seperation</remarks>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Umbraco.Core.Configuration.UmbracoSettings.WebServices"/> is enabled.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.DocumentServiceUsers">
            <summary>
            Gets the document service users who have access to use the document web service
            </summary>
            <value>The document service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.FileServiceUsers">
            <summary>
            Gets the file service users who have access to use the file web service
            </summary>
            <value>The file service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.FileServiceFolders">
            <summary>
            Gets the folders used by the file web service
            </summary>
            <value>The file service folders.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.MemberServiceUsers">
            <summary>
            Gets the member service users who have access to use the member web service
            </summary>
            <value>The member service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.StylesheetServiceUsers">
            <summary>
            Gets the stylesheet service users who have access to use the stylesheet web service
            </summary>
            <value>The stylesheet service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.TemplateServiceUsers">
            <summary>
            Gets the template service users who have access to use the template web service
            </summary>
            <value>The template service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.MediaServiceUsers">
            <summary>
            Gets the media service users who have access to use the media web service
            </summary>
            <value>The media service users.</value>
        </member>
        <member name="P:Umbraco.Core.Configuration.UmbracoSettings.WebServices.MaintenanceServiceUsers">
            <summary>
            Gets the maintenance service users who have access to use the maintance web service
            </summary>
            <value>The maintenance service users.</value>
        </member>
        <member name="T:Umbraco.Core.CustomBooleanTypeConverter">
            <summary>
            Allows for converting string representations of 0 and 1 to boolean
            </summary>
        </member>
        <member name="T:Umbraco.Core.DataTypesResolver">
            <summary>
            A resolver to return all IDataType objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.DataTypesResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="dataTypes"></param>		
        </member>
        <member name="P:Umbraco.Core.DataTypesResolver.DataTypes">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.ICacheRefresher"/> implementations.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Umbraco.Core.DisposableTimer" -->
        <member name="M:Umbraco.Core.DisposableTimer.Start(System.Action{System.Int64})">
            <summary>
            Starts the timer and invokes the specified callback upon disposal.
            </summary>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.TraceDuration``1(System.String,System.String)">
            <summary>
            Adds a start and end log entry as Info and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.TraceDuration(System.Type,System.String,System.String)">
            <summary>
            Adds a start and end log entry as Info and tracks how long it takes until disposed.
            </summary>
            <param name="loggerType"></param>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration``1(System.String,System.String)">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration``1(System.Func{System.String},System.Func{System.String})">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration(System.Type,System.String,System.String)">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <param name="loggerType"></param>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DebugDuration(System.Type,System.Func{System.String},System.Func{System.String})">
            <summary>
            Adds a start and end log entry as Debug and tracks how long it takes until disposed.
            </summary>
            <param name="loggerType"></param>
            <param name="startMessage"></param>
            <param name="completeMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.DisposableTimer.DisposeResources">
            <summary>
            Handles the disposal of resources. Derived from abstract class <see cref="T:Umbraco.Core.DisposableObject"/> which handles common required locking logic.
            </summary>
        </member>
        <member name="T:Umbraco.Core.ExpressionHelper">
            <summary>
            A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="!:Expression&lt;Action&lt;T&gt;&gt;"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="fromExpression"/> is null or cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="expression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="!:Expression&lt;Func&lt;T, TReturn&gt;&gt;"/> provided it refers to member access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> or null if <paramref name="fromExpression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from a <see cref="T:System.Delegate"/>
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Does something 'x' amount of times
            </summary>
            <param name="n"></param>
            <param name="action"></param>
        </member>
        <member name="M:Umbraco.Core.IntExtensions.ToGuid(System.Int32)">
            <summary>
            Creates a Guid based on an integer value
            </summary>
            <param name="value"><see cref="T:System.Int32"/> value to convert</param>
            <returns><see cref="T:System.Guid"/></returns>
        </member>
        <member name="T:Umbraco.Core.LambdaExpressionCacheKey">
            <summary>
            Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression"/> in a form which is suitable for using as a dictionary key
            by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ArgTypes">
            <summary>
            The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ReturnType">
            <summary>
            The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:Umbraco.Core.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
            The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.LambdaExpressionCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Umbraco.Core.PackageActionsResolver">
            <summary>
            A resolver to return all IPackageAction objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.PackageActionsResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="packageActions"></param>		
        </member>
        <member name="P:Umbraco.Core.PackageActionsResolver.PackageActions">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IPackageAction"/> implementations.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.AsynchronousRollingFileAppender">
            <summary>
            Based on code by Chris Haines http://cjbhaines.wordpress.com/2012/02/13/asynchronous-log4net-appenders/
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrors(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task shouldn't be waited on (as it's not guaranteed to run), and you shouldn't wait on the parent task either (because it might throw an 
                exception that doesn't get handled). If you want to be waiting on something, use LogErrorsWaitable instead.
            
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                errors yourself.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LoggingTaskExtension.LogErrorsWaitable(System.Threading.Tasks.Task,System.Action{System.String,System.Exception})">
            <summary>
                This task can be waited on (as it's guaranteed to run), and you should wait on this rather than the parent task. Because it's
                guaranteed to run, it may be slower than using LogErrors, and you should consider using that method if you don't want to wait.
            
                None of these methods are suitable for tasks that return a value. If you're wanting a result, you should probably be handling
                errors yourself.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Logging.LogHelper">
            <summary>
             Used for logging
            </summary>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.LoggerFor``1">
            <summary>
             Returns a logger for the type specified
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.LoggerFor(System.Object)">
            <summary>
            Returns a logger for the object's type
            </summary>
            <param name="getTypeFromInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.PrefixThreadId(System.String)">
            <summary>
            Useful if the logger itself is running on another thread
            </summary>
            <param name="generateMessageFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Error``1(System.String,System.Exception)">
            <summary>
            Adds an error log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Warn``1(System.String,System.Func{System.Object}[])">
            <summary>
            Adds a warn log
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <param name="formatItems"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info``1(System.Func{System.String})">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info(System.Type,System.Func{System.String})">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Traces if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Info``1(System.String,System.Func{System.Object}[])">
            <summary>
            Traces a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.Func{System.String})">
            <summary>
            Debugs a message, only generating the message if tracing is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessage">The delegate to generate a message.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug(System.Type,System.Func{System.String})">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="callingType"></param>
            <param name="generateMessage"></param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Debugs if tracing is enabled.
            </summary>
            <param name="type">The type for the logging namespace.</param>
            <param name="generateMessageFormat">The message format.</param>
            <param name="formatItems">The format items.</param>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.String,System.Func{System.Object}[])">
            <summary>
            Debugs a message, only generating the message if debug is actually enabled. Use this method to avoid calling any long-running methods such as "ToDebugString" if logging is disabled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat">The generate message format.</param>
            <param name="formatItems">The format items.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.Logging.LogHelper.Debug``1(System.String,System.Boolean,System.Func{System.Object}[])">
            <summary>
            Debugs a message and also writes to the TraceContext specified, useful for when you would like the debug
            output also displayed in the Http trace output.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="generateMessageFormat"></param>
            <param name="showHttpTrace"></param>
            <param name="formatItems"></param>
        </member>
        <member name="T:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver">
            <summary>
            A resolver to return all IMacroGuiRendering objects
            </summary>
            <remarks>
            Much of this classes methods are based on legacy code from umbraco.editorControls.macrocontainer.MacroControlFactory
            this code should probably be reviewed and cleaned up if necessary.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            Constructor
            </summary>
            <param name="macroEditors"></param>		
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver.GetValueFromMacroControl(System.Web.UI.Control)">
            <summary>
            Gets the value based on the type of control
            </summary>
            <param name="macroControl"></param>
            <returns></returns>
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver.GetMacroRenderControlByType(Umbraco.Core.Macros.PersistableMacroProperty,System.String)">
            <summary>
            Create an instance of a Macro control and return it.
            Because the macro control uses inline client script whichs is not generated after postback
            That's why we use the Page Picker instead of the content picker of the macro.
            </summary>
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver.MacroFieldEditors">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IMacroGuiRendering"/> implementations.
            </summary>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.MacroFieldEditorsResolver.MacroControlTypes">
            <remarks>
            This is legacy code migrated from umbraco.editorControls.macrocontainer.MacroControlFactory
            </remarks>
        </member>
        <member name="T:Umbraco.Core.Macros.PersistableMacroProperty">
            <summary>
            NOTE: This is legacy code, might require a cleanup
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Name">
            <summary>
            Macro Caption
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Alias">
            <summary>
            Macro Alias
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.Value">
            <summary>
            Macro Value
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.AssemblyName">
            <summary>
            AssemblyName of the Property of teh Macro
            </summary>
        </member>
        <member name="P:Umbraco.Core.Macros.PersistableMacroProperty.TypeName">
            <summary>
            TypeName of the property of the macro
            </summary>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.SafeCast``1(System.Object)">
            <summary>
            Provides a shortcut way of safely casting an input when you cannot guarantee the <typeparam name="T"></typeparam> is an instance type (i.e., when the C# AS keyword is not applicable)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo``1(System.Object)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertTo(System.Object,System.Type)">
            <summary>
            Tries to convert the input object to the output type using TypeConverters. If the destination type is a superclass of the input type,
            if will use <see cref="M:System.Convert.ChangeType(System.Object,System.Type)"/>.
            </summary>
            <param name="input">The input.</param>
            <param name="destinationType">Type of the destination.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``3(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}}[])">
            <summary>
            Converts an object into a dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TVal"> </typeparam>
            <param name="o"></param>
            <param name="ignoreProperties"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToDictionary``1(System.Object,System.String[])">
            <summary>
            Turns object into dictionary
            </summary>
            <param name="o"></param>
            <param name="ignoreProperties">Properties to ignore</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.TryConvertToXmlString(System.Object,System.Type)">
            <summary>
            Attempts to serialize the value to an XmlString using ToXmlString
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.ObjectExtensions.ToXmlString(System.Object,System.Type)">
            <summary>
            Returns an XmlSerialized safe string representation for the value
            </summary>
            <param name="value"></param>
            <param name="type">The Type can only be a primitive type or Guid and byte[] otherwise an exception is thrown</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.PropertyEditorValueConvertersResolver">
            <summary>
            Manages the list of IPropertyEditorValueConverter's
            </summary>
        </member>
        <member name="T:Umbraco.Core.PropertyEditors.TinyMcePropertyEditorValueConverter">
            <summary>
            Value converter for the RTE so that it always returns IHtmlString so that Html.Raw doesn't have to be used.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.TinyMcePropertyEditorValueConverter.ConvertPropertyValue(System.Object)">
            <summary>
            Return IHtmlString so devs doesn't need to decode html
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PropertyEditors.YesNoPropertyEditorValueConverter.ConvertPropertyValue(System.Object)">
            <summary>
            Convert from string boolean or 0 or 1 to real boolean
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.ObjectResolution.Resolution.IsFrozen">
            <summary>
            Gets a value indicating that resolution is frozen
            </summary>
            <remarks>
            The internal setter is normally used for unit tests
            </remarks>
        </member>
        <member name="F:Umbraco.Core.PublishedContentHelper.GetDataTypeCallback">
            <summary>
            This callback is used only so we can set it dynamically because in the "Core" project currently we don't have
            access to the business logic layer. 
            TODO: Once 6.0 is released we need to change this to use the new business logic layer that we can access from 
             this proejct. Until then this will return a Guid.Empty but the callback will need to be set in the WebBootManager
             to work in the website. if people use this in a non-web aspect without the WebBootManager, the the IPropertyEditorValueConverters
             will not be executed.
            </summary>
        </member>
        <member name="M:Umbraco.Core.PublishedContentHelper.ConvertPropertyValue(System.Object,System.Guid,System.String,System.String)">
            <summary>
            Converts the currentValue to a correctly typed value based on known registered converters, then based on known standards.
            </summary>
            <param name="currentValue"></param>
            <param name="dataType"></param>
            <param name="docTypeAlias"></param>
            <param name="propertyTypeAlias"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Publishing.BasePublishingStrategy">
            <summary>
            Abstract class for the implementation of an <see cref="T:Umbraco.Core.Publishing.IPublishingStrategy"/>, which provides the events used for publishing/unpublishing.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Publishing.IPublishingStrategy">
            <summary>
            Defines the Publishing Strategy
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishWithChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Publishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Unpublishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to unpublish</param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublish(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Unpublishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.IPublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.BasePublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="T:Umbraco.Core.Publishing.PublishingStrategy">
            <summary>
            Currently acts as an interconnection between the new public api and the legacy api for publishing
            </summary>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishWithChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Publishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the publish operation</param>
            <returns>True if the publish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Unpublishes a single piece of Content
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to unpublish</param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublish(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32)">
            <summary>
            Unpublishes a list of Content
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <param name="userId">Id of the User issueing the unpublish operation</param>
            <returns>True if the unpublish operation was successfull and not cancelled, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <remarks>
            This seperation of the OnPublished event is done to ensure that the Content
            has been properly updated (committed unit of work) and xml saved in the db.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.PublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Boolean)">
            <summary>
            Call to fire event that updating the published content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being published</param>
            <param name="isAllRepublished">Boolean indicating whether its all content that is republished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublishingFinalized(Umbraco.Core.Models.IContent)">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="M:Umbraco.Core.Publishing.PublishingStrategy.UnPublishingFinalized(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent})">
            <summary>
            Call to fire event that updating the unpublished content has finalized.
            </summary>
            <param name="content">An enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> thats being unpublished</param>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.Publishing">
            <summary>
            Occurs before publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.Published">
            <summary>
            Occurs after publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.UnPublishing">
            <summary>
            Occurs before unpublish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Publishing.PublishingStrategy.UnPublished">
            <summary>
            Occurs after unpublish
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and deserializes the <see cref="T:System.IO.Stream"/> <paramref name="input"/> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.AbstractSerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and serializes the <paramref name="input"/> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult"/> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="P:Umbraco.Core.Serialization.AbstractSerializationService.Formatters">
            <summary>
              A sequence of <see cref="T:Umbraco.Core.Serialization.IFormatter"/> registered with this serialization service.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.FromStream(System.IO.Stream,System.Type,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and deserializes the <see cref="T:System.IO.Stream"/> <paramref name="input"/> to an object graph.
            </summary>
            <param name="input"> </param>
            <param name="outputType"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="M:Umbraco.Core.Serialization.SerializationService.ToStream(System.Object,System.String)">
            <summary>
              Finds an <see cref="T:Umbraco.Core.Serialization.IFormatter"/> with a matching <paramref name="intent"/> , and serializes the <paramref name="input"/> object graph to an <see cref="T:Umbraco.Core.Serialization.IStreamedResult"/> .
            </summary>
            <param name="input"> </param>
            <param name="intent"> </param>
            <returns> </returns>
        </member>
        <member name="T:Umbraco.Core.Services.ContentService">
            <summary>
            Represents the Content Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IContentService">
            <summary>
            Defines the ContentService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IService">
            <summary>
            Marker interface for services, which is used to store difference services in a list or dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContent(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content is based on.
            </summary>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.CreateContent(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content is based on.
            </summary>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentOfContentType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by its Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetRootContent">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForExpiration">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has an expiration date greater then today
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentForRelease">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has a release date greater then today
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetContentInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>        
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteContentOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional Id of the user issueing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IContent"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes a specific version from an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IContent"/> object to a new location
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Rollback(System.Int32,System.Guid,System.Int32)">
            <summary>
            Rollback an <see cref="T:Umbraco.Core.Models.IContent"/> object to a previous version.
            This will create a new version, which is a copy of all the old data.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/>being rolled back</param>
            <param name="versionId">Id of the version to rollback to</param>
            <param name="userId">Optional Id of the User issueing the rollback of the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetChildrenByName(System.Int32,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by its name or partial name
            </summary>
            <param name="parentId">Id of the Parent to retrieve Children from</param>
            <param name="name">Full or partial name of the children</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetDescendants(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.GetPublishedVersion(System.Int32)">
            <summary>
            Gets the published version of an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve version from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.HasPublishedVersion(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any published version otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.RePublishAll(System.Int32)">
            <summary>
            Re-Publishes all Content
            </summary>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentService.IsPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContent(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content is based on.
            </summary>
            <param name="name">Name of the Content object</param>
            <param name="parentId">Id of Parent for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.CreateContent(System.String,Umbraco.Core.Models.IContent,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IContent"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            that this Content is based on.
            </summary>
            <param name="name">Name of the Content object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IContent"/> object for the new Content</param>
            <param name="contentTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional id of the user creating the content</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContent"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContent"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentOfContentType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Content from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IContent"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetChildrenByName(System.Int32,System.String)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by its name or partial name
            </summary>
            <param name="parentId">Id of the Parent to retrieve Children from</param>
            <param name="name">Full or partial name of the children</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetDescendants(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects by Parent Id
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPublishedVersion(System.Int32)">
            <summary>
            Gets the published version of an <see cref="T:Umbraco.Core.Models.IContent"/> item
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> to retrieve version from</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IContent"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetRootContent">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentForExpiration">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has an expiration date less than or equal to today.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentForRelease">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects, which has a release date less than or equal to today.
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetContentInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IContent"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.HasPublishedVersion(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContent"/> item has any published versions
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/></param>
            <returns>True if the content has any published version otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.IsPublishable(Umbraco.Core.Models.IContent)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.RePublishAll(System.Int32)">
            <summary>
            This will rebuild the xml structures for content in the database. 
            </summary>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
            <remarks>
            This is used for when a document type alias or a document type property is changed, the xml will need to 
            be regenerated.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Publish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildren(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.UnPublish(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(Umbraco.Core.Models.IContent,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContent},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContent"/> objects.
            </summary>
            <remarks>
            If the collection of content contains new objects that references eachother by Id or ParentId,
            then use the overload Save method with a collection of Lazy <see cref="T:Umbraco.Core.Models.IContent"/>.
            </remarks>
            <param name="contents">Collection of <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteContentOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all content of specified type. All children of deleted content is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="contentTypeId">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <param name="userId">Optional Id of the user issueing the delete operation</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Delete(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object as well as all of its Children.
            </summary>
            <remarks>
            This method will also delete associated media files, child content and possibly associated domains.
            </remarks>
            <remarks>Please note that this method will completely remove the Content from the database</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IContent"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IContent"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.MoveToRecycleBin(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IContent"/> object by moving it to the Recycle Bin
            </summary>
            <remarks>Move an item to the Recycle Bin will result in the item being unpublished</remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to delete</param>
            <param name="userId">Optional Id of the User deleting the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Move(Umbraco.Core.Models.IContent,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IContent"/> object to a new location by changing its parent id.
            </summary>
            <remarks>
            If the <see cref="T:Umbraco.Core.Models.IContent"/> object is already published it will be
            published after being moved to its new location. Otherwise it'll just
            be saved with a new parent id.
            </remarks>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to move</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="userId">Optional Id of the User moving the Content</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IContent"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Copy(Umbraco.Core.Models.IContent,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Copies an <see cref="T:Umbraco.Core.Models.IContent"/> object by creating a new Content object of the same type and copies all data from the current 
            to the new copy which is returned.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to copy</param>
            <param name="parentId">Id of the Content's new Parent</param>
            <param name="relateToOriginal">Boolean indicating whether the copy should be related to the original</param>
            <param name="userId">Optional Id of the User copying the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SendToPublication(Umbraco.Core.Models.IContent,System.Int32)">
            <summary>
            Sends an <see cref="T:Umbraco.Core.Models.IContent"/> to Publication, which executes handlers and events for the 'Send to Publication' action.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to send to publication</param>
            <param name="userId">Optional Id of the User issueing the send to publication</param>
            <returns>True if sending publication was succesfull otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Rollback(System.Int32,System.Guid,System.Int32)">
            <summary>
            Rollback an <see cref="T:Umbraco.Core.Models.IContent"/> object to a previous version.
            This will create a new version, which is a copy of all the old data.
            </summary>
            <remarks>
            The way data is stored actually only allows us to rollback on properties
            and not data like Name and Alias of the Content.
            </remarks>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContent"/>being rolled back</param>
            <param name="versionId">Id of the version to rollback to</param>
            <param name="userId">Optional Id of the User issueing the rollback of the Content</param>
            <returns>The newly created <see cref="T:Umbraco.Core.Models.IContent"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Publish(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            Internal method that Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object for legacy purposes.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Publish method. By default this method will not update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildren(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            Internal method that Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children for legacy purposes.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Publish method. By default this method will not update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.UnPublish(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            Internal method that UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object for legacy purposes.
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Unpublish method. By default this method will not update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublish(Umbraco.Core.Models.IContent,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Publish method. By default this method will not update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.GetPublishedDescendants(Umbraco.Core.Models.IContent)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IContent"/> descendants by the first Parent.
            </summary>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> item to retrieve Descendants from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContent"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.RePublishAllDo(System.Int32[])">
            <summary>
            Rebuilds all xml content in the cmsContentXml table for all published documents
            </summary>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.PublishWithChildrenDo(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            Publishes a <see cref="T:Umbraco.Core.Models.IContent"/> object and all its children
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish along with its children</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Publish method. By default this method will update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.UnPublishDo(Umbraco.Core.Models.IContent,System.Boolean,System.Int32)">
            <summary>
            UnPublishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Unpublish method. By default this method will update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <returns>True if unpublishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.SaveAndPublishDo(Umbraco.Core.Models.IContent,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Saves and Publishes a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save and publish</param>
            <param name="omitCacheRefresh">Optional boolean to avoid having the cache refreshed when calling this Publish method. By default this method will update the cache.</param>
            <param name="userId">Optional Id of the User issueing the publishing</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise save events.</param>
            <returns>True if publishing succeeded, otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.Save(Umbraco.Core.Models.IContent,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContent"/> object
            </summary>
            <param name="content">The <see cref="T:Umbraco.Core.Models.IContent"/> to save</param>
            <param name="changeState">Boolean indicating whether or not to change the Published state upon saving</param>
            <param name="userId">Optional Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentService.IsPublishable(Umbraco.Core.Models.IContent,System.Boolean)">
            <summary>
            Checks if the passed in <see cref="T:Umbraco.Core.Models.IContent"/> can be published based on the anscestors publish state.
            </summary>
            <remarks>
            Check current is only used when falling back to checking the Parent of non-saved content, as
            non-saved content doesn't have a valid path yet.
            </remarks>
            <param name="content"><see cref="T:Umbraco.Core.Models.IContent"/> to check if anscestors are published</param>
            <param name="checkCurrent">Boolean indicating whether the passed in content should also be checked for published versions</param>
            <returns>True if the Content can be published, otherwise False</returns>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Publishing">
            <summary>
            Occurs before publish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Published">
            <summary>
            Occurs after publish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.UnPublishing">
            <summary>
            Occurs before unpublish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.UnPublished">
            <summary>
            Occurs after unpublish.
            </summary>
            <remarks>Proxy to the real event on the <see cref="T:Umbraco.Core.Publishing.PublishingStrategy"/></remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.DeletingVersions">
            <summary>
            Occurs before Delete Versions
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.DeletedVersions">
            <summary>
            Occurs after Delete Versions
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Created">
            <summary>
            Occurs after Create
            </summary>
            <remarks>
            Please note that the Content object has been created, but not saved
            so it does not have an identity yet (meaning no Id has been set).
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Copying">
            <summary>
            Occurs before Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Copied">
            <summary>
            Occurs after Copy
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Trashing">
            <summary>
            Occurs before Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Trashed">
            <summary>
            Occurs after Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.RollingBack">
            <summary>
            Occurs before Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.RolledBack">
            <summary>
            Occurs after Rollback
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.SendingToPublish">
            <summary>
            Occurs before Send to Publish
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentService.SentToPublish">
            <summary>
            Occurs after Send to Publish
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ContentTypeService">
            <summary>
            Represents the ContentType Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IContentTypeService">
            <summary>
            Defines the ContentTypeService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllContentTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional Id of the User saving the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
            <param name="userId">Optional Id of the User deleting the ContentTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetAllMediaTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetMediaTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the User saving the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the User saving the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
            <param name="userId">Optional Id of the User deleting the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
            <param name="userId">Optional Id of the User deleting the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetDtd">
            <summary>
            Generates the complete (simplified) XML DTD.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.GetContentTypesDtd">
            <summary>
            Generates the complete XML DTD without the root.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IContentTypeService.MediaTypeHasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IContentType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IContentType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IContentType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllContentTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IContentType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IContentType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IContentType"/></param>
            <returns>True if the content type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional id of the user saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to save</param>
            <param name="userId">Optional id of the user saving the ContentType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(Umbraco.Core.Models.IContentType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IContentType"/> object
            </summary>
            <param name="contentType"><see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <param name="userId">Optional id of the user issueing the delete</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IContentType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IContentType"/> objects.
            </summary>
            <param name="contentTypes">Collection of <see cref="T:Umbraco.Core.Models.IContentType"/> to delete</param>
            <param name="userId">Optional id of the user issueing the delete</param>
            <remarks>
            Deleting a <see cref="T:Umbraco.Core.Models.IContentType"/> will delete all the <see cref="T:Umbraco.Core.Models.IContent"/> objects based on this <see cref="T:Umbraco.Core.Models.IContentType"/>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaType(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaType(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMediaType"/> object by its Alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/> to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMediaType"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetAllMediaTypes(System.Int32[])">
            <summary>
            Gets a list of all available <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="ids">Optional list of ids</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetMediaTypeChildren(System.Int32)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="id">Id of the Parent</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.MediaTypeHasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMediaType"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>True if the media type has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the user saving the MediaType</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to save</param>
            <param name="userId">Optional Id of the user savging the MediaTypes</param>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(Umbraco.Core.Models.IMediaType,System.Int32)">
            <summary>
            Deletes a single <see cref="T:Umbraco.Core.Models.IMediaType"/> object
            </summary>
            <param name="mediaType"><see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <param name="userId">Optional Id of the user deleting the MediaType</param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.Delete(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMediaType},System.Int32)">
            <summary>
            Deletes a collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> objects
            </summary>
            <param name="mediaTypes">Collection of <see cref="T:Umbraco.Core.Models.IMediaType"/> to delete</param>
            <param name="userId"></param>
            <remarks>Deleting a <see cref="T:Umbraco.Core.Models.IMediaType"/> will delete all the <see cref="T:Umbraco.Core.Models.IMedia"/> objects based on this <see cref="T:Umbraco.Core.Models.IMediaType"/></remarks>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetDtd">
            <summary>
            Generates the complete (simplified) XML DTD.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ContentTypeService.GetContentTypesDtd">
            <summary>
            Generates the complete XML DTD without the root.
            </summary>
            <returns>The DTD as a string</returns>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletingContentType">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletedContentType">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletingMediaType">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.DeletedMediaType">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavingContentType">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavedContentType">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavingMediaType">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.ContentTypeService.SavedMediaType">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.DataTypeService">
            <summary>
            Represents the DataType Service, which is an easy access to operations involving <see cref="T:umbraco.interfaces.IDataType"/> and <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IDataTypeService">
            <summary>
            Defines the DataType Service, which is an easy access to operations involving <see cref="T:umbraco.interfaces.IDataType"/> and <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetAllDataTypeDefinitions(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.Delete(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>.
            </remarks>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to delete</param>
            <param name="userId">Id of the user issueing the deletion</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeById(System.Guid)">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IDataType"/> specified by it's unique ID
            </summary>
            <param name="id">Id of the DataType, which corresponds to the Guid Id of the control</param>
            <returns><see cref="T:umbraco.interfaces.IDataType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetAllDataTypes">
            <summary>
            Gets a complete list of all registered <see cref="T:umbraco.interfaces.IDataType"/>'s
            </summary>
            <returns>An enumerable list of <see cref="T:umbraco.interfaces.IDataType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetDataTypeDefinitionByControlId(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="id">Id of the DataType control</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetPreValuesByDataTypeId(System.Int32)">
            <summary>
            Gets all values for an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to retrieve prevalues from</param>
            <returns>An enumerable list of string values</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="id">Id of the DataTypeDefinition to save PreValues for</param>
            <param name="values">List of string values to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.IDataTypeService.GetPreValueAsString(System.Int32)">
            <summary>
            Gets a specific PreValue by its Id
            </summary>
            <param name="id">Id of the PreValue to retrieve the value from</param>
            <returns>PreValue as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its Id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its unique guid Id
            </summary>
            <param name="id">Unique guid Id of the DataType</param>
            <returns><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeDefinitionByControlId(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> by its control Id
            </summary>
            <param name="id">Id of the DataType control</param>
            <returns>Collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects with a matching contorl id</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetAllDataTypeDefinitions(System.Int32[])">
            <summary>
            Gets all <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects or those with the ids passed in
            </summary>
            <param name="ids">Optional array of Ids</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetPreValuesByDataTypeId(System.Int32)">
            <summary>
            Gets all values for an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to retrieve prevalues from</param>
            <returns>An enumerable list of string values</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetPreValueAsString(System.Int32)">
            <summary>
            Gets a specific PreValue by its Id
            </summary>
            <param name="id">Id of the PreValue to retrieve the value from</param>
            <returns>PreValue as a string</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Save(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IDataTypeDefinition},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="dataTypeDefinitions"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to save</param>
            <param name="userId">Id of the user issueing the save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.SavePreValues(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of PreValues for a given DataTypeDefinition
            </summary>
            <param name="id">Id of the DataTypeDefinition to save PreValues for</param>
            <param name="values">List of string values to save</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.Delete(Umbraco.Core.Models.IDataTypeDefinition,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <remarks>
            Please note that deleting a <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> will remove
            all the <see cref="T:Umbraco.Core.Models.PropertyType"/> data that references this <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>.
            </remarks>
            <param name="dataTypeDefinition"><see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/> to delete</param>
            <param name="userId">Optional Id of the user issueing the deletion</param>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetDataTypeById(System.Guid)">
            <summary>
            Gets the <see cref="T:umbraco.interfaces.IDataType"/> specified by it's unique ID
            </summary>
            <param name="id">Id of the DataType, which corresponds to the Guid Id of the control</param>
            <returns><see cref="T:umbraco.interfaces.IDataType"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.DataTypeService.GetAllDataTypes">
            <summary>
            Gets a complete list of all registered <see cref="T:umbraco.interfaces.IDataType"/>'s
            </summary>
            <returns>An enumerable list of <see cref="T:umbraco.interfaces.IDataType"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.DataTypeService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.FileService">
            <summary>
            Represents the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.IFileService">
            <summary>
            Defines the File Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IFile"/> objects like Scripts, Stylesheets and Templates
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId">Optional id of the user saving the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="name">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId">Optional id of the user deleting the stylesheet</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId">Optional id of the user saving the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="name">Name incl. extension of the Script to delete</param>
            <param name="userId">Optional id of the user deleting the script</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias
            </summary>
            <param name="alias">Alias of the template</param>
            <returns>A <see cref="T:Umbraco.Core.Models.ITemplate"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias
            </summary>
            <param name="id">Id of the template</param>
            <returns>A <see cref="T:Umbraco.Core.Models.ITemplate"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to save</param>
            <param name="userId">Optional id of the user saving the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId">Optional id of the user deleting the template</param>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IFileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetStylesheets(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Stylesheet"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetStylesheetByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Stylesheet"/> object by its name
            </summary>
            <param name="name">Name of the stylesheet incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Stylesheet"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveStylesheet(Umbraco.Core.Models.Stylesheet,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteStylesheet(System.String,System.Int32)">
            <summary>
            Deletes a stylesheet by its name
            </summary>
            <param name="name">Name incl. extension of the Stylesheet to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateStylesheet(Umbraco.Core.Models.Stylesheet)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Stylesheet"/>
            </summary>
            <param name="stylesheet"><see cref="T:Umbraco.Core.Models.Stylesheet"/> to validate</param>
            <returns>True if Stylesheet is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetScripts(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.Script"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.Script"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetScriptByName(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Script"/> object by its name
            </summary>
            <param name="name">Name of the script incl. extension</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Script"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveScript(Umbraco.Core.Models.Script,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteScript(System.String,System.Int32)">
            <summary>
            Deletes a script by its name
            </summary>
            <param name="name">Name incl. extension of the Script to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateScript(Umbraco.Core.Models.Script)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.Script"/>
            </summary>
            <param name="script"><see cref="T:Umbraco.Core.Models.Script"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplates(System.String[])">
            <summary>
            Gets a list of all <see cref="T:Umbraco.Core.Models.ITemplate"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ITemplate"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplate(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias
            </summary>
            <param name="alias">Alias of the template</param>
            <returns>A <see cref="T:Umbraco.Core.Models.Template"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.GetTemplate(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ITemplate"/> object by its alias
            </summary>
            <param name="id">Id of the template</param>
            <returns>A <see cref="T:Umbraco.Core.Models.ITemplate"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveTemplate(Umbraco.Core.Models.ITemplate,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.Template"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.SaveTemplate(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.ITemplate},System.Int32)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.Template"/> objects
            </summary>
            <param name="templates">List of <see cref="T:Umbraco.Core.Models.Template"/> to save</param>
            <param name="userId">Optional id of the user</param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.DeleteTemplate(System.String,System.Int32)">
            <summary>
            Deletes a template by its alias
            </summary>
            <param name="alias">Alias of the <see cref="T:Umbraco.Core.Models.ITemplate"/> to delete</param>
            <param name="userId"></param>
        </member>
        <member name="M:Umbraco.Core.Services.FileService.ValidateTemplate(Umbraco.Core.Models.ITemplate)">
            <summary>
            Validates a <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="template"><see cref="T:Umbraco.Core.Models.ITemplate"/> to validate</param>
            <returns>True if Script is valid, otherwise false</returns>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingTemplate">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedTemplate">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingScript">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedScript">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletingStylesheet">
            <summary>
            Occurs before Delete
            </summary>        
        </member>
        <member name="E:Umbraco.Core.Services.FileService.DeletedStylesheet">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingTemplate">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedTemplate">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingScript">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedScript">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavingStylesheet">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.FileService.SavedStylesheet">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.ILocalizationService">
            <summary>
            Defines the Localization Service, which is an easy access to operations involving Languages and Dictionary
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ILanguage"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.ILanguage"/></param>
            <returns><see cref="T:Umbraco.Core.Models.ILanguage"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetLanguageByCultureCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.ILanguage"/> by its culture code
            </summary>
            <param name="culture">Culture Code</param>
            <returns><see cref="T:Umbraco.Core.Models.ILanguage"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.ILocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it and its usages from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="T:Umbraco.Core.Services.IMacroService">
            <summary>
            Defines the ContentService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetAll(System.String[])">
            <summary>
            Gets a list all available <see cref="T:Umbraco.Core.Models.IMacro"/> objects
            </summary>
            <param name="aliases">Optional array of aliases to limit the results</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMacro"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional id of the user saving the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetMacroPropertyTypes">
            <summary>
            Gets a list all available <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> plugins
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMacroService.GetMacroPropertyTypeByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> object</returns>
        </member>
        <member name="T:Umbraco.Core.Services.IMediaService">
            <summary>
            Defines the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media is based on.
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media is based on.
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetDescendants(System.Int32)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="id">Id of the Parent to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaOfMediaType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional Id of the user deleting Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            but current not from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Media</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.IMediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retreive (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.IUserService">
            <summary>
            Defines the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> and eventually Users and Members.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetCurrentBackOfficeUser(System.Web.HttpContextBase)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the current BackOffice User
            </summary>
            <param name="httpContext">HttpContext to fetch the user through</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/> containing the Name and Id of the logged in BackOffice User</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetCurrentBackOfficeUser">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the current BackOffice User.
            </summary>
            <remarks>
            Requests the current HttpContext, so this method will only work in a web context.
            </remarks>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/> containing the Name and Id of the logged in BackOffice User</returns>
        </member>
        <member name="M:Umbraco.Core.Services.IUserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="T:Umbraco.Core.Services.LocalizationService">
            <summary>
            Represents the Localization Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Language"/> and <see cref="T:Umbraco.Core.Models.DictionaryItem"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Int32"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemById(System.Guid)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its <see cref="T:System.Guid"/> id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.DictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemByKey(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> by its key
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns><see cref="T:Umbraco.Core.Models.IDictionaryItem"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetDictionaryItemChildren(System.Guid)">
            <summary>
            Gets a list of children for a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/>
            </summary>
            <param name="parentId">Id of the parent</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetRootDictionaryItems">
            <summary>
            Gets the root/top <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.DictionaryItemExists(System.String)">
            <summary>
            Checks if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> with given key exists
            </summary>
            <param name="key">Key of the <see cref="T:Umbraco.Core.Models.IDictionaryItem"/></param>
            <returns>True if a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> exists, otherwise false</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Save(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to save</param>
            <param name="userId">Optional id of the user saving the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Delete(Umbraco.Core.Models.IDictionaryItem,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.IDictionaryItem"/> object and its related translations
            as well as its children.
            </summary>
            <param name="dictionaryItem"><see cref="T:Umbraco.Core.Models.IDictionaryItem"/> to delete</param>
            <param name="userId">Optional id of the user deleting the dictionary item</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetLanguageById(System.Int32)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its id
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.Language"/></param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetLanguageByCultureCode(System.String)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Models.Language"/> by its culture code
            </summary>
            <param name="culture">Culture Code</param>
            <returns><see cref="T:Umbraco.Core.Models.Language"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.GetAllLanguages">
            <summary>
            Gets all available languages
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.ILanguage"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Save(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Saves a <see cref="T:Umbraco.Core.Models.ILanguage"/> object
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to save</param>
            <param name="userId">Optional id of the user saving the language</param>
        </member>
        <member name="M:Umbraco.Core.Services.LocalizationService.Delete(Umbraco.Core.Models.ILanguage,System.Int32)">
            <summary>
            Deletes a <see cref="T:Umbraco.Core.Models.ILanguage"/> by removing it (but not its usages) from the db
            </summary>
            <param name="language"><see cref="T:Umbraco.Core.Models.ILanguage"/> to delete</param>
            <param name="userId">Optional id of the user deleting the language</param>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletingLanguage">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletedLanguage">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletingDictionaryItem">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.DeletedDictionaryItem">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavingDictionaryItem">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavedDictionaryItem">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavingLanguage">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.LocalizationService.SavedLanguage">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.MacroService">
            <summary>
            Represents the Macro Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.EnsureMacroCache">
            <summary>
            Ensures the macro cache by getting all macros
            from the repository and thus caching them.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacro"/> object by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacro"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacro"/> object</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetAll(System.String[])">
            <summary>
            Gets a list all available <see cref="T:Umbraco.Core.Models.IMacro"/> objects
            </summary>
            <param name="aliases">Optional array of aliases to limit the results</param>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMacro"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.Delete(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to delete</param>
            <param name="userId">Optional id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.Save(Umbraco.Core.Models.IMacro,System.Int32)">
            <summary>
            Saves an <see cref="T:Umbraco.Core.Models.IMacro"/>
            </summary>
            <param name="macro"><see cref="T:Umbraco.Core.Models.IMacro"/> to save</param>
            <param name="userId">Optional Id of the user deleting the macro</param>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetMacroPropertyTypes">
            <summary>
            Gets a list all available <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> plugins
            </summary>
            <returns>An enumerable list of <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MacroService.GetMacroPropertyTypeByAlias(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> by its alias
            </summary>
            <param name="alias">Alias to retrieve an <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> for</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMacroPropertyType"/> object</returns>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MacroService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.MediaService">
            <summary>
            Represents the Media Service, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.IMedia"/>
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMedia(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media is based on.
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parentId">Id of Parent for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.CreateMedia(System.String,Umbraco.Core.Models.IMedia,System.String,System.Int32)">
            <summary>
            Creates an <see cref="T:Umbraco.Core.Models.IMedia"/> object using the alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/>
            that this Media is based on.
            </summary>
            <param name="name">Name of the Media object</param>
            <param name="parent">Parent <see cref="T:Umbraco.Core.Models.IMedia"/> for the new Media item</param>
            <param name="mediaTypeAlias">Alias of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user creating the media item</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetById(System.Int32)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by Id
            </summary>
            <param name="id">Id of the Content to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetById(System.Guid)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid key of the Media to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetByLevel(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Level
            </summary>
            <param name="level">The level to retrieve Media from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetByVersion(System.Guid)">
            <summary>
            Gets a specific version of an <see cref="T:Umbraco.Core.Models.IMedia"/> item.
            </summary>
            <param name="versionId">Id of the version to retrieve</param>
            <returns>An <see cref="T:Umbraco.Core.Models.IMedia"/> item</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetVersions(System.Int32)">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects versions by Id
            </summary>
            <param name="id"></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetChildren(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by Parent Id
            </summary>
            <param name="id">Id of the Parent to retrieve Children from</param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetDescendants(System.Int32)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="id">Id of the Parent to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetDescendants(Umbraco.Core.Models.IMedia)">
            <summary>
            Gets descendants of a <see cref="T:Umbraco.Core.Models.IMedia"/> object by its Id
            </summary>
            <param name="media">The Parent <see cref="T:Umbraco.Core.Models.IMedia"/> object to retrieve descendants from</param>
            <returns>An Enumerable flat list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaOfMediaType(System.Int32)">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects by the Id of the <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetRootMedia">
            <summary>
            Gets a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which reside at the first level / root
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaInRecycleBin">
            <summary>
            Gets a collection of an <see cref="T:Umbraco.Core.Models.IMedia"/> objects, which resides in the Recycle Bin
            </summary>
            <returns>An Enumerable list of <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.GetMediaByPath(System.String)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.IMedia"/> object from the path stored in the 'umbracoFile' property.
            </summary>
            <param name="mediaPath">Path of the media item to retreive (for example: /media/1024/koala_403x328.jpg)</param>
            <returns><see cref="T:Umbraco.Core.Models.IMedia"/></returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.HasChildren(System.Int32)">
            <summary>
            Checks whether an <see cref="T:Umbraco.Core.Models.IMedia"/> item has any children
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/></param>
            <returns>True if the media has any children otherwise False</returns>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Move(Umbraco.Core.Models.IMedia,System.Int32,System.Int32)">
            <summary>
            Moves an <see cref="T:Umbraco.Core.Models.IMedia"/> object to a new location
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to move</param>
            <param name="parentId">Id of the Media's new Parent</param>
            <param name="userId">Id of the User moving the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.MoveToRecycleBin(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object by moving it to the Recycle Bin
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.EmptyRecycleBin">
            <summary>
            Empties the Recycle Bin by deleting all <see cref="T:Umbraco.Core.Models.IMedia"/> that resides in the bin
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteMediaOfType(System.Int32,System.Int32)">
            <summary>
            Deletes all media of specified type. All children of deleted media is moved to Recycle Bin.
            </summary>
            <remarks>This needs extra care and attention as its potentially a dangerous and extensive operation</remarks>
            <param name="mediaTypeId">Id of the <see cref="T:Umbraco.Core.Models.IMediaType"/></param>
            <param name="userId">Optional id of the user deleting the media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Delete(Umbraco.Core.Models.IMedia,System.Int32)">
            <summary>
            Permanently deletes an <see cref="T:Umbraco.Core.Models.IMedia"/> object as well as all of its Children.
            </summary>
            <remarks>
            Please note that this method will completely remove the Media from the database,
            as well as associated media files from the file system.
            </remarks>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to delete</param>
            <param name="userId">Id of the User deleting the Media</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteVersions(System.Int32,System.DateTime,System.Int32)">
            <summary>
            Permanently deletes versions from an <see cref="T:Umbraco.Core.Models.IMedia"/> object prior to a specific date.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete versions from</param>
            <param name="versionDate">Latest version date</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.DeleteVersion(System.Int32,System.Guid,System.Boolean,System.Int32)">
            <summary>
            Permanently deletes specific version(s) from an <see cref="T:Umbraco.Core.Models.IMedia"/> object.
            </summary>
            <param name="id">Id of the <see cref="T:Umbraco.Core.Models.IMedia"/> object to delete a version from</param>
            <param name="versionId">Id of the version to delete</param>
            <param name="deletePriorVersions">Boolean indicating whether to delete versions prior to the versionId</param>
            <param name="userId">Optional Id of the User deleting versions of a Content object</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Save(Umbraco.Core.Models.IMedia,System.Int32,System.Boolean)">
            <summary>
            Saves a single <see cref="T:Umbraco.Core.Models.IMedia"/> object
            </summary>
            <param name="media">The <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.Save(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.Int32,System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            </summary>
            <param name="medias">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> to save</param>
            <param name="userId">Id of the User saving the Content</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:Umbraco.Core.Services.MediaService.UpdatePathAndLevelOnChildren(System.Collections.Generic.IEnumerable{Umbraco.Core.Models.IMedia},System.String,System.Int32)">
            <summary>
            Updates the Path and Level on a collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects
            based on the Parent's Path and Level.
            </summary>
            <param name="children">Collection of <see cref="T:Umbraco.Core.Models.IMedia"/> objects to update</param>
            <param name="parentPath">Path of the Parent media</param>
            <param name="parentLevel">Level of the Parent media</param>
            <returns>Collection of updated <see cref="T:Umbraco.Core.Models.IMedia"/> objects</returns>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.DeletingVersions">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.DeletedVersions">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Created">
            <summary>
            Occurs after Create
            </summary>
            <remarks>
            Please note that the Media object has been created, but not saved
            so it does not have an identity yet (meaning no Id has been set).
            </remarks>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Trashing">
            <summary>
            Occurs before Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Trashed">
            <summary>
            Occurs after Content is moved to Recycle Bin
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Moving">
            <summary>
            Occurs before Move
            </summary>
        </member>
        <member name="E:Umbraco.Core.Services.MediaService.Moved">
            <summary>
            Occurs after Move
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.PackagingService">
            <summary>
            Represents the Packaging Service, which provides import/export functionality for the Core models of the API
            using xml representation. This is primarily used by the Package functionality.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContent(System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContent"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="parentId">Optional parent Id for the content being imported</param>
            <param name="userId">Optional Id of the user performing the import</param>
            <returns>An enumrable list of generated content</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportContentTypes(System.Xml.Linq.XElement,System.Boolean,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IContentType"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="importStructure">Boolean indicating whether or not to import the </param>
            <param name="userId">Optional id of the User performing the operation. Default is zero (admin).</param>
            <returns>An enumrable list of generated ContentTypes</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportDataTypeDefinitions(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.IDataTypeDefinition"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId"></param>
            <returns>An enumrable list of generated DataTypeDefinitions</returns>
        </member>
        <member name="M:Umbraco.Core.Services.PackagingService.ImportTemplates(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Imports and saves package xml as <see cref="T:Umbraco.Core.Models.ITemplate"/>
            </summary>
            <param name="element">Xml to import</param>
            <param name="userId">Optional user id</param>
            <returns>An enumrable list of generated Templates</returns>
        </member>
        <member name="T:Umbraco.Core.Services.ServiceContext">
            <summary>
            The Umbraco ServiceContext, which provides access to the following services:
            <see cref="T:Umbraco.Core.Services.IContentService"/>, <see cref="T:Umbraco.Core.Services.IContentTypeService"/>, <see cref="T:Umbraco.Core.Services.IDataTypeService"/>,
            <see cref="T:Umbraco.Core.Services.IFileService"/>, <see cref="T:Umbraco.Core.Services.ILocalizationService"/> and <see cref="T:Umbraco.Core.Services.IMediaService"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.#ctor(Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider,Umbraco.Core.Publishing.IPublishingStrategy)">
            <summary>
            Constructor
            </summary>
            <param name="dbUnitOfWorkProvider"></param>
            <param name="fileUnitOfWorkProvider"></param>
            <param name="publishingStrategy"></param>
        </member>
        <member name="M:Umbraco.Core.Services.ServiceContext.BuildServiceCache(Umbraco.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Persistence.UnitOfWork.IUnitOfWorkProvider,Umbraco.Core.Publishing.IPublishingStrategy,System.Lazy{Umbraco.Core.Persistence.RepositoryFactory})">
            <summary>
            Builds the various services
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.ContentTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IContentTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.DataTypeService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IDataTypeService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.FileService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IFileService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.LocalizationService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.ILocalizationService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MediaService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMediaService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.PackagingService">
            <summary>
            Gets the <see cref="P:Umbraco.Core.Services.ServiceContext.PackagingService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.MacroService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMacroService"/>
            </summary>
        </member>
        <member name="P:Umbraco.Core.Services.ServiceContext.UserService">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Services.IMacroService"/>
            </summary>
        </member>
        <member name="T:Umbraco.Core.Services.UserService">
            <summary>
            Represents the UserService, which is an easy access to operations involving <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> and eventually Users and Members.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetCurrentBackOfficeUser(System.Web.HttpContextBase)">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the current BackOffice User.
            </summary>
            <param name="httpContext">HttpContext to fetch the user through</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/> containing the Name and Id of the logged in BackOffice User</returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetCurrentBackOfficeUser">
            <summary>
            Gets an <see cref="T:Umbraco.Core.Models.Membership.IProfile"/> for the current BackOffice User.
            </summary>
            <remarks>
            Requests the current HttpContext, so this method will only work in a web context.
            </remarks>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/> containing the Name and Id of the logged in BackOffice User</returns>
        </member>
        <member name="M:Umbraco.Core.Services.UserService.GetProfileById(System.Int32)">
            <summary>
            Gets an IProfile by User Id.
            </summary>
            <param name="id">Id of the User to retrieve</param>
            <returns><see cref="T:Umbraco.Core.Models.Membership.IProfile"/></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Checks if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            reference: http://jclaes.blogspot.com/2011/05/checking-for-anonymous-types.html
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.HasParameters(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determines whether the specified type is enumerable.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsEnumerable(System.Type)">
            <returns>
              <c>true</c> if the specified type is enumerable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsOfGenericType(System.Type,System.Type)">
            <summary>
            Determines whether [is of generic type] [the specified type].
            </summary>
            <param name="type">The type.</param>
            <param name="genericType">Type of the generic.</param>
            <returns>
              <c>true</c> if [is of generic type] [the specified type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.TryGetGenericArguments(System.Type,System.Type,System.Type[]@)">
            <summary>
            Will find the generic type of the 'type' parameter passed in that is equal to the 'genericType' parameter passed in
            </summary>
            <param name="type"></param>
            <param name="genericType"></param>
            <param name="genericArgType"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetAllProperties(System.Type)">
            <summary>
            Gets all properties in a flat hierarchy
            </summary>
            <remarks>Includes both Public and Non-Public properties</remarks>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.IsType``1(System.Type)">
            <summary>
            Determines whether the specified actual type is type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actualType">The actual type.</param>
            <returns>
              <c>true</c> if the specified actual type is type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeExtensions.GetFullNameWithAssembly(System.Type)">
            <summary>
            Returns the full type name with the assembly but without all of the assembly specific version information.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            This method is like an 'inbetween' of Type.FullName and Type.AssemblyQualifiedName which returns the type and the assembly separated
            by a comma.
            </remarks>
            <example>
            The output of this class would be:
            
            Umbraco.Core.TypeExtensions, Umbraco.Core
            </example>
        </member>
        <member name="T:Umbraco.Core.ReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
        </member>
        <member name="T:Umbraco.Core.TypeFinder">
            <summary>
            A utility class to find all classes of a certain type by reflection in the current bin folder
            of the web application. 
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetAllAssemblies">
            <summary>
            lazily load a reference to all assemblies and only local assemblies.
            This is a modified version of: http://www.dominicpettifer.co.uk/Blog/44/how-to-get-a-reference-to-all-assemblies-in-the--bin-folder
            </summary>
            <remarks>
            We do this because we cannot use AppDomain.Current.GetAssemblies() as this will return only assemblies that have been 
            loaded in the CLR, not all assemblies.
            See these threads:
            http://issues.umbraco.org/issue/U5-198
            http://stackoverflow.com/questions/3552223/asp-net-appdomain-currentdomain-getassemblies-assemblies-missing-after-app
            http://stackoverflow.com/questions/2477787/difference-between-appdomain-getassemblies-and-buildmanager-getreferencedassembl
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetBinAssemblies">
            <summary>
            Returns only assemblies found in the bin folder that have been loaded into the app domain.
            </summary>
            <returns></returns>
            <remarks>
            This will be used if we implement App_Plugins from Umbraco v5 but currently it is not used.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetAssembliesWithKnownExclusions(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Return a list of found local Assemblies excluding the known assemblies we don't want to scan 
            and exluding the ones passed in and excluding the exclusion list filter, the results of this are
            cached for perforance reasons.
            </summary>
            <param name="excludeFromResults"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetFilteredAssemblies(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String[])">
            <summary>
            Return a list of found local Assemblies and exluding the ones passed in and excluding the exclusion list filter
            </summary>
            <param name="excludeFromResults"></param>
            <param name="exclusionFilter"></param>
            <returns></returns>
        </member>
        <member name="F:Umbraco.Core.TypeFinder.KnownAssemblyExclusionFilter">
            <summary>
            this is our assembly filter to filter out known types that def dont contain types we'd like to find or plugins
            </summary>
            <remarks>
            NOTE the comma vs period... comma delimits the name in an Assembly FullName property so if it ends with comma then its an exact name match
            </remarks>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1">
            <summary>
            Searches all filtered local assemblies specified for classes of the type passed in.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesOfType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Returns all types found of in the assemblies specified of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute(System.Type,System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Finds the classes with attribute.
            </summary>
            <param name="type">The attribute type </param>
            <param name="assemblies">The assemblies.</param>
            <param name="onlyConcreteClasses">if set to <c>true</c> only concrete classes.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds the classes with attribute.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies">The assemblies.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.FindClassesWithAttribute``1">
            <summary>
            Finds the classes with attribute in filtered local assemblies
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeFinder.GetAssignablesFromType``1(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Boolean)">
            <summary>
            Gets a collection of assignables of type T from a collection of assemblies
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assemblies"></param>
            <param name="onlyConcreteClasses"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.TypeHelper">
            <summary>
            A utility class for type checking, this provides internal caching so that calls to these methods will be faster
            than doing a manual type check in c#
            </summary>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
            	<c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsTypeAssignableFrom``1(System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.IsImplicitValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> is an implied value type (<see cref="P:System.Type.IsValueType"/>, <see cref="P:System.Type.IsEnum"/> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.GetProperty(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a PropertyInfo from a type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="mustRead"></param>
            <param name="mustWrite"></param>
            <param name="includeIndexed"></param>
            <param name="caseSensitive"> </param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.CachedDiscoverableFields(System.Type)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.FieldInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.TypeHelper.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.PropertyInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.UmbracoApplicationBase">
            <summary>
            The abstract class for the Umbraco HttpApplication
            </summary>
            <remarks>
            This is exposed in the core so that we can have the IApplicationEventHandler in the core project so that 
            IApplicationEventHandler's can fire/execute outside of the web contenxt (i.e. in console applications)
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.StartApplication(System.Object,System.EventArgs)">
            <summary>
            Boots up the Umbraco application
            </summary>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.Application_Start(System.Object,System.EventArgs)">
            <summary>
            Initializes the Umbraco application
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationStarting(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to modify objects on startup
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationStarted(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to do anything they need to do once the application startup routine is completed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationError(System.Object,System.EventArgs)">
            <summary>
            A method that can be overridden to invoke code when the application has an error.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Umbraco.Core.UmbracoApplicationBase.OnApplicationEnd(System.Object,System.EventArgs)">
            <summary>
            A method that can be overridden to invoke code when the application shuts down.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Umbraco.Core.UpgradeableReadLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.UpgradeableReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.ReadLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.DelegateEqualityComparer`1">
            <summary>
            A custom equality comparer that excepts a delegate to do the comparison operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.</param><param name="y">The second object of type <paramref name="T"/> to compare.</param>
        </member>
        <member name="M:Umbraco.Core.DelegateEqualityComparer`1.GetHashCode(`0)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Umbraco.Core.EnumerableExtensions">
            <summary>
             Extensions for enumerable sources
            </summary>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The distinct by.</summary>
            <param name="source">The source.</param>
            <param name="keySelector">The key selector.</param>
            <typeparam name="TSource">Source type</typeparam>
            <typeparam name="TKey">Key type</typeparam>
            <returns>the unique list</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.Range``1(System.Func{System.Int32,``0},System.Int32)">
            <summary>
            Returns a sequence of length <paramref name="count"/> whose elements are the result of invoking <paramref name="factory"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="factory">The factory.</param>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="func">The func.</param>
            <typeparam name="TItem">item type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <returns>the Results</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>The for each.</summary>
            <param name="items">The items.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FlattenList``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            <summary>The flatten list.</summary>
            <param name="items">The items.</param>
            <param name="selectChild">The select child.</param>
            <typeparam name="TItem">Item type</typeparam>
            <returns>list of TItem</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if all items in the other collection exist in this collection
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if the source contains any of the items in the other list
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.RemoveAll``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all matching items from an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="predicate">The predicate.</param>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.WhereNotNull``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Filters a sequence of values to ignore those which are null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll">The coll.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Finds the index of the first item matching an expression in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="predicate">The expression to test the items against.</param>
            <returns>The index of the first matching item, or -1 if no items match.</returns>
        </member>
        <member name="M:Umbraco.Core.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Finds the index of the first occurence of an item in an enumerable.</summary>
            <param name="items">The enumerable to search.</param>
            <param name="item">The item to find.</param>
            <returns>The index of the first matching item, or -1 if the item was not found.</returns>
        </member>
        <member name="T:Umbraco.Core.IfExtensions">
            <summary>
            Extension methods for 'If' checking like checking If something is null or not null
            </summary>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``1(``0,System.Action{``0})">
            <summary>The if not null.</summary>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <typeparam name="TItem">The type</typeparam>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfTrue(System.Boolean,System.Action)">
            <summary>The if true.</summary>
            <param name="predicate">The predicate.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNotNull``2(``1,System.Func{``1,``0},``0)">
            <summary>
            Checks if the item is not null, and if so returns an action on that item, or a default value
            </summary>
            <typeparam name="TResult">the result type</typeparam>
            <typeparam name="TItem">The type</typeparam>
            <param name="item">The item.</param>
            <param name="action">The action.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IfExtensions.IfNull``1(``0,System.Func{``0,``0})">
            <summary>
            Checks if the value is null, if it is it returns the value specified, otherwise returns the non-null value
            </summary>
            <typeparam name="TItem"></typeparam>
            <param name="item"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PluginManager">
            <summary>
            Used to resolve all plugin types and cache them and is also used to instantiate plugin types
            </summary>
            <remarks>
            
            This class should be used to resolve all plugin types, the TypeFinder should not be used directly!
            
            This class can expose extension methods to resolve custom plugins
            
            Before this class resolves any plugins it checks if the hash has changed for the DLLs in the /bin folder, if it hasn't
            it will use the cached resolved plugins that it has already found which means that no assembly scanning is necessary. This leads
            to much faster startup times.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.#ctor(Umbraco.Core.ApplicationContext,System.Boolean)">
            <summary>
            Creates a new PluginManager with an ApplicationContext instance which ensures that the plugin xml 
            file is cached temporarily until app startup completes.
            </summary>
            <param name="appContext"></param>
            <param name="detectBinChanges"></param>
        </member>
        <member name="M:Umbraco.Core.PluginManager.#ctor(System.Boolean)">
            <summary>
            Creates a new PluginManager
            </summary>
            <param name="detectCodeChanges">
            If true will detect changes in the /bin folder and therefor load plugins from the 
            cached plugins file if one is found. If false will never use the cache file for plugins
            </param>
        </member>
        <member name="M:Umbraco.Core.PluginManager.WriteCachePluginsHash">
            <summary>
            Writes the assembly hash file
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.GetAssembliesHash(System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo})">
            <summary>
            Returns a unique hash for the combination of FileInfo objects passed in
            </summary>
            <param name="filesAndFolders"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ConvertPluginsHashFromHex(System.String)">
            <summary>
            Converts the hash value of current plugins to long from string
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.TryGetCachedPluginsFromFile``1(Umbraco.Core.PluginManager.TypeResolutionKind)">
            <summary>
            Attempts to resolve the list of plugin + assemblies found in the runtime for the base type 'T' passed in.
            If the cache file doesn't exist, fails to load, is corrupt or the type 'T' element is not found then 
            a false attempt is returned.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.DetectLegacyPluginListFile">
            <summary>
            This will return true if the plugin list file is a legacy one
            </summary>
            <returns></returns>
            <remarks>
            This method exists purely due to an error in 4.11. We were writing the plugin list file without the 
            type resolution kind which will have caused some problems. Now we detect this legacy file and if it is detected
            we remove it so it can be recreated properly.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.UpdateCachedPluginsFile``1(System.Collections.Generic.IEnumerable{System.Type},Umbraco.Core.PluginManager.TypeResolutionKind)">
             <summary>
             Adds/Updates the type list for the base type 'T' in the cached file
             </summary>
             <typeparam name="T"></typeparam>
             <param name="typesFound"></param>
            <param name="resolutionType"> </param>
            <remarks>
             THIS METHOD IS NOT THREAD SAFE
             </remarks>
             <example>
             <![CDATA[
             <plugins>
            		<baseType type="Test.Testing.Tester">
            			<add type="My.Assembly.MyTester" assembly="My.Assembly" />
            			<add type="Your.Assembly.YourTester" assembly="Your.Assembly" />
            		</baseType>
             </plugins>
             ]]>
             </example>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveApplicationStartupHandlers">
            <summary>
            Returns all available IApplicationStartupHandler objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveCacheRefreshers">
            <summary>
            Returns all classes attributed with XsltExtensionAttribute attribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolvePropertyEditorValueConverters">
            <summary>
            Returns all available IPropertyEditorValueConverter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveDataTypes">
            <summary>
            Returns all available IDataType in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveMacroRenderings">
            <summary>
            Returns all available IMacroGuiRendering in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolvePackageActions">
            <summary>
            Returns all available IPackageAction in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveActions">
            <summary>
            Returns all available IAction in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveMacroPropertyTypes">
            <summary>
            Returns all available IMacroPropertyTypes in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveMigrationTypes">
            <summary>
            Returns all available IMigrations in application
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveSqlSyntaxProviders">
            <summary>
            Returns all SqlSyntaxProviders with the SqlSyntaxProviderAttribute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.FindAndCreateInstances``1(System.Boolean)">
            <summary>
            Used to resolve and create instances of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="throwException">set to true if an exception is to be thrown if there is an error during instantiation</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.CreateInstances``1(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Used to create instances of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="types"></param>
            <param name="throwException">set to true if an exception is to be thrown if there is an error during instantiation</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
            Used to create an instance of the specified type based on the resolved/cached plugin types
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.LoadViaScanningAndUpdateCacheFile``1(Umbraco.Core.PluginManager.TypeList,Umbraco.Core.PluginManager.TypeResolutionKind,System.Func{System.Collections.Generic.IEnumerable{System.Type}})">
            <summary>
            This method invokes the finder which scans the assemblies for the types and then loads the result into the type finder.
            Once the results are loaded, we update the cached type xml file
            </summary>
            <param name="typeList"></param>
            <param name="resolutionKind"> </param>
            <param name="finder"></param>
            <remarks>
            THIS METHODS IS NOT THREAD SAFE
            </remarks>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveTypes``1(System.Boolean)">
            <summary>
            Generic method to find the specified type and cache the result
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveTypesWithAttribute``2(System.Boolean)">
            <summary>
            Generic method to find the specified type that has an attribute and cache the result
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.ResolveAttributedTypes``1(System.Boolean)">
            <summary>
            Generic method to find any type that has the specified attribute
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.PluginManager.GetTypeLists">
            <summary>
            Used for unit tests
            </summary>
            <returns></returns>
        </member>
        <member name="P:Umbraco.Core.PluginManager.Current">
            <summary>
            We will ensure that no matter what, only one of these is created, this is to ensure that caching always takes place
            </summary>
            <remarks>
            The setter is generally only used for unit tests
            </remarks>
        </member>
        <member name="P:Umbraco.Core.PluginManager.HaveAssembliesChanged">
            <summary>
            Returns a bool if the assemblies in the /bin have changed since they were last hashed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.PluginManager.CachedAssembliesHash">
            <summary>
            Returns the currently cached hash value of the scanned assemblies in the /bin folder. Returns 0 
            if no cache is found.
            </summary>
            <value> </value>
        </member>
        <member name="P:Umbraco.Core.PluginManager.CurrentAssembliesHash">
            <summary>
            Returns the current assemblies hash based on creating a hash from the assemblies in the /bin
            </summary>
            <value> </value>
        </member>
        <member name="P:Umbraco.Core.PluginManager.AssembliesToScan">
            <summary>
            Gets/sets which assemblies to scan when type finding, generally used for unit testing, if not explicitly set
            this will search all assemblies known to have plugins and exclude ones known to not have them.
            </summary>
        </member>
        <member name="T:Umbraco.Core.PluginManager.TypeResolutionKind">
            <summary>
            The type of resolution being invoked
            </summary>
        </member>
        <member name="M:Umbraco.Core.PluginManager.TypeList`1.IsTypeList``1(Umbraco.Core.PluginManager.TypeResolutionKind)">
            <summary>
            Returns true if the current TypeList is of the same type and of the same type
            </summary>
            <typeparam name="TLookup"></typeparam>
            <param name="resolutionType"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.PluginManager.CachedPluginNotFoundInFile">
            <summary>
            This class is used simply to determine that a plugin was not found in the cache plugin list with the specified
            TypeResolutionKind.
            </summary>
        </member>
        <member name="T:Umbraco.Core.IO.FileSystemProviderManager.ProviderConstructionInfo">
            <summary>
            used to cache the lookup of how to construct this object so we don't have to reflect each time.
            </summary>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.ValidateEditPath(System.String,System.String)">
            <summary>
            Validates if the current filepath matches a directory where the user is allowed to edit a file
            </summary>
            <param name="filePath">filepath </param>
            <param name="validDir"></param>
            <returns>true if valid, throws a FileSecurityException if not</returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.GetRootDirectorySafe">
            <summary>
            Returns the path to the root of the application, by getting the path to where the assembly where this
            method is included is present, then traversing until it's past the /bin directory. Ie. this makes it work
            even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.IO.IOHelper.SafeFileName(System.String)">
            <summary>
            Check to see if filename passed has any special chars in it and strips them to create a safe filename.  Used to overcome an issue when Umbraco is used in IE in an intranet environment.
            </summary>
            <param name="filePath">The filename passed to the file handler from the upload field.</param>
            <returns>A safe filename without any path specific chars.</returns>
        </member>
        <member name="P:Umbraco.Core.IO.SystemDirectories.Root">
            <summary>
            Gets the root path of the application
            </summary>
        </member>
        <member name="T:Umbraco.Core.StringExtensions">
            <summary>
             String extension methods
            </summary>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EncryptWithMachineKey(System.String)">
            <summary>
            Encrypt the string using the MachineKey in medium trust
            </summary>
            <param name="value">The string value to be encrypted.</param>
            <returns>The encrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.DecryptWithMachineKey(System.String)">
            <summary>
            Decrypt the encrypted string using the Machine key in medium trust
            </summary>
            <param name="value">The string value to be decrypted</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Trim(System.String,System.String)">
            <summary>
            Trims the specified value from a string; accepts a string input whereas the in-built implementation only accepts char or char[].
            </summary>
            <param name="value">The value.</param>
            <param name="forRemoving">For removing.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Is null or white space.</summary>
            <param name="str">The str.</param>
            <returns>The is null or white space.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToDelimitedList(System.String,System.String)">
            <summary>The to delimited list.</summary>
            <param name="list">The list.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>the list</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumTryParse``1(System.String,System.Boolean,``0@)">
            <summary>enum try parse.</summary>
            <param name="strType">The str type.</param>
            <param name="ignoreCase">The ignore case.</param>
            <param name="result">The result.</param>
            <typeparam name="T">The type</typeparam>
            <returns>The enum try parse.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EnumParse``1(System.String,System.Boolean)">
            <summary>
            Parse string to Enum
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="strType">The string to parse</param>
            <param name="ignoreCase">The ignore case</param>
            <returns>The parsed enum</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripHtml(System.String)">
            <summary>
            Strips all html from a string.
            </summary>
            <param name="text">The text.</param>
            <returns>Returns the string without any html tags.</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlAlias(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts string to a URL alias.
            </summary>
            <param name="value">The value.</param>
            <param name="charReplacements">The char replacements.</param>
            <param name="replaceDoubleDashes">if set to <c>true</c> replace double dashes.</param>
            <param name="stripNonAscii">if set to <c>true</c> strip non ASCII.</param>
            <param name="urlEncode">if set to <c>true</c> URL encode.</param>
            <returns></returns>
            <remarks>
            This ensures that ONLY ascii chars are allowed and of those ascii chars, only digits and lowercase chars, all
            punctuation, etc... are stripped out, however this method allows you to pass in string's to replace with the
            specified replacement character before the string is converted to ascii and it has invalid characters stripped out.
            This allows you to replace strings like &amp; , etc.. with your replacement character before the automatic
            reduction.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUmbracoAlias(System.String,Umbraco.Core.StringAliasCaseType,System.Boolean)">
            <summary>
            Converts a string for use with an entity alias which is camel case and without invalid characters
            </summary>
            <param name="phrase">The phrase.</param>
            <param name="caseType">By default this is camel case</param>
            <param name="removeSpaces">if set to <c>true</c> [remove spaces].</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.SplitPascalCasing(System.String)">
            <summary>
            Splits a Pascal cased string into a phrase seperated by spaces.
            </summary>
            <param name="phrase">String to split</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertCase(System.String,Umbraco.Core.StringAliasCaseType)">
            <summary>
            Converts the phrase to specified convention.
            </summary>
            <param name="phrase"></param>
            <param name="cases">The cases.</param>
            <returns>string</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.EncodeAsGuid(System.String)">
            <summary>
            Encodes as GUID.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ConvertToHex(System.String)">
            <summary>
            Converts to hex.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToUrlBase64(System.String)">
            <summary>
             Encodes a string to a safe URL base64 string
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.FromUrlBase64(System.String)">
            <summary>
            Decodes a URL safe base64 string back
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantFormat(System.String,System.Object[])">
            <summary>
            formats the string with invariant culture
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.InvariantEquals(System.String,System.String)">
            <summary>
            Compares 2 strings with invariant culture and case ignored
            </summary>
            <param name="compare">The compare.</param>
            <param name="compareTo">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.IsGuid(System.String,System.Boolean)">
            <summary>
            Determines if the string is a Guid
            </summary>
            <param name="str"></param>
            <param name="withHyphens"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto``1(System.String)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ParseInto(System.String,System.Type)">
            <summary>
            Tries to parse a string into the supplied type by finding and using the Type's "Parse" method
            </summary>
            <param name="val"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToMd5(System.String)">
            <summary>
            Converts the string to MD5
            </summary>
            <param name="stringToConvert">referrs to itself</param>
            <returns>the md5 hashed string</returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenDecode(System.String)">
            <summary>
            Decodes a string that was encoded with UrlTokenEncode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.UrlTokenEncode(System.Byte[])">
            <summary>
            Encodes a string so that it is 'safe' for URLs, files, etc..
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.NormaliseDirectoryPath(System.String)">
            <summary>
            Ensures that the folder path endds with a DirectorySeperatorChar
            </summary>
            <param name="currentFolder"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Truncates the specified text string.
            </summary>
            <param name="text">The text.</param>
            <param name="maxLength">Length of the max.</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.StripNewLines(System.String)">
            <summary>
            Strips carrage returns and line feeds from the specified text.
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.StringExtensions.ToSafeAlias(System.String)">
            <summary>
            An extention method to ensure that an Alias string doesn't contains any illegal characters
            which is defined in a private constant 'ValidCharacters' in this class. 
            Conventions over configuration, baby. You can't touch this - MC Hammer!
            </summary>
            <remarks>
            Copied and cleaned up a bit from umbraco.cms.helpers.Casing.
            </remarks>
            <param name="alias">The alias.</param>
            <returns>An alias guaranteed not to contain illegal characters</returns>
        </member>
        <member name="T:Umbraco.Core.SystemUtilities">
            <summary>
            Static helper methods for returning information about the current System
            </summary>
        </member>
        <member name="M:Umbraco.Core.SystemUtilities.GetCurrentTrustLevel">
            <summary>
            Get the current trust level of the hosted application
            </summary>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.UrlHelperExtensions">
            <summary>
            Extension methods for UrlHelper
            </summary>
        </member>
        <member name="M:Umbraco.Core.UrlHelperExtensions.GetSaveFileServicePath(System.Web.Mvc.UrlHelper)">
            <summary>
            Returns the base path (not including the 'action') of the MVC controller "SaveFileController"
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.WriteLock">
            <summary>
            Provides a convenience methodology for implementing locked access to resources. 
            </summary>
            <remarks>
            Intended as an infrastructure class.
            </remarks>
        </member>
        <member name="M:Umbraco.Core.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.WriteLock"/> class.
            </summary>
            <param name="rwLock">The rw lock.</param>
        </member>
        <member name="T:Umbraco.Core.XmlExtensions">
            <summary>
            Extension methods for xml objects
            </summary>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXmlDocument(System.Xml.Linq.XDocument)">
            <summary>
            Converts from an XDocument to an XmlDocument
            </summary>
            <param name="xDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXDocument(System.Xml.XmlDocument)">
            <summary>
            Converts from an XmlDocument to an XDocument
            </summary>
            <param name="xmlDocument"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXmlElement(System.Xml.Linq.XElement)">
            <summary>
            Converts from an XElement to an XmlElement
            </summary>
            <param name="xElement"></param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            Converts from an XmlElement to an XElement
            </summary>
            <param name="xmlElement"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.XmlHelper">
            <summary>
            The XmlHelper class contains general helper methods for working with xml in umbraco.
            </summary>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.SortNodes(System.Xml.XmlNode,System.String,System.Func{System.Xml.Linq.XElement,System.Boolean},System.Func{System.Xml.Linq.XElement,System.Object})">
            <summary>
            Sorts the children of the parentNode that match the xpath selector 
            </summary>
            <param name="parentNode"></param>
            <param name="childXPathSelector">An xpath expression used to select child nodes of the XmlElement</param>
            <param name="childSelector">An expression that returns true if the XElement passed in is a valid child node to be sorted</param>
            <param name="orderByValue">The value to order the results by</param>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.ImportXmlNodeFromText(System.String,System.Xml.XmlDocument@)">
            <summary>
            Imports a XML node from text.
            </summary>
            <param name="text">The text.</param>
            <param name="xmlDoc">The XML doc.</param>
            <returns></returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.OpenAsXmlDocument(System.String)">
            <summary>
            Opens a file as a XmlDocument.
            </summary>
            <param name="filePath">The relative file path. ei. /config/umbraco.config</param>
            <returns>Returns a XmlDocument class</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            creates a XmlAttribute with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
            <returns>a XmlAttribute</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddTextNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a text XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>a XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.AddCDataNode(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates a cdata XmlNode with the specified name and value
            </summary>
            <param name="xd">The xmldocument.</param>
            <param name="name">The node name.</param>
            <param name="value">The node value.</param>
            <returns>A XmlNode</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.GetNodeValue(System.Xml.XmlNode)">
            <summary>
            Gets the value of a XmlNode
            </summary>
            <param name="n">The XmlNode.</param>
            <returns>the value as a string</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.CouldItBeXml(System.String)">
            <summary>
            Determines whether the specified string appears to be XML.
            </summary>
            <param name="xml">The XML string.</param>
            <returns>
            	<c>true</c> if the specified string appears to be XML; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.Split(System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="data">The data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root.</param>
            <param name="elementName">Name of the element.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.Split(System.Xml.XmlDocument,System.String,System.String[],System.String,System.String)">
            <summary>
            Splits the specified delimited string into an XML document.
            </summary>
            <param name="xml">The XML document.</param>
            <param name="data">The delimited string data.</param>
            <param name="separator">The separator.</param>
            <param name="rootName">Name of the root node.</param>
            <param name="elementName">Name of the element node.</param>
            <returns>Returns an <c>System.Xml.XmlDocument</c> representation of the delimited string data.</returns>
        </member>
        <member name="M:Umbraco.Core.XmlHelper.GetAttributesFromElement(System.String)">
            <summary>
            Return a dictionary of attributes found for a string based tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext">
            <summary>
            Provides the evaluation context for fast execution and custom 
            variables resolution.
            </summary>
            <remarks>
            This class is responsible for resolving variables during dynamic expression execution.
            <para>Discussed in http://weblogs.asp.net/cazzu/archive/2003/10/07/30888.aspx</para>
            <para>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></para>
            </remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> 
            class with the specified <see cref="T:System.Xml.NameTable"/>.
            </summary>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.#ctor(System.Xml.XmlNamespaceManager,System.Xml.NameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:Umbraco.Core.Xml.DynamicContext"/> class.
            </summary>
            <param name="context">A previously filled context with the namespaces to use.</param>
            <param name="table">The NameTable to use.</param>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.CompareDocument(System.String,System.String)">
            <summary>
            Implementation equal to <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupNamespace(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.LookupPrefix(System.String)">
            <summary>
            Same as <see cref="T:System.Xml.XmlNamespaceManager"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.Compile(System.String)">
            <summary>
            Shortcut method that compiles an expression using an empty navigator.
            </summary>
            <param name="xpath">The expression to compile</param>
            <returns>A compiled <see cref="T:System.Xml.XPath.XPathExpression"/>.</returns>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.AddVariable(System.String,System.Object)">
            <summary>
            Adds the variable to the dynamic evaluation context.
            </summary>
            <param name="name">The name of the variable to add to the context.</param>
            <param name="value">The value of the variable to add to the context.</param>
            <remarks>
            Value type conversion for XPath evaluation is as follows:
            <list type="table">
            	<listheader>
            		<term>CLR Type</term>
            		<description>XPath type</description>
            	</listheader>
            	<item>
            		<term>System.String</term>
            		<description>XPathResultType.String</description>
            	</item>
            	<item>
            		<term>System.Double (or types that can be converted to)</term>
            		<description>XPathResultType.Number</description>
            	</item>
            	<item>
            		<term>System.Boolean</term>
            		<description>XPathResultType.Boolean</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNavigator</term>
            		<description>XPathResultType.Navigator</description>
            	</item>
            	<item>
            		<term>System.Xml.XPath.XPathNodeIterator</term>
            		<description>XPathResultType.NodeSet</description>
            	</item>
            	<item>
            		<term>Others</term>
            		<description>XPathResultType.Any</description>
            	</item>
            </list>
            <note type="note">See the topic "Compile, Select, Evaluate, and Matches with 
            XPath and XPathExpressions" in MSDN documentation for additional information.</note>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
            <summary>
            See <see cref="T:System.Xml.Xsl.XsltContext"/>. Not used in our implementation.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.ResolveVariable(System.String,System.String)">
            <summary>
            Resolves the dynamic variables added to the context. See <see cref="T:System.Xml.Xsl.XsltContext"/>. 
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.DynamicContext.Whitespace">
            <summary>
            Same as <see cref="T:System.Xml.Xsl.XsltContext"/>.
            </summary>
        </member>
        <member name="T:Umbraco.Core.Xml.DynamicContext.DynamicVariable">
            <summary>
            Represents a variable during dynamic expression execution.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.DynamicContext.DynamicVariable.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value of the variable.</param>
        </member>
        <member name="T:Umbraco.Core.Xml.XmlNamespaces">
            <summary>
            Provides public constants for wellknown XML namespaces.
            </summary>
            <remarks>Author: Daniel Cazzulino, <a href="http://clariusconsulting.net/kzu">blog</a></remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xml">
            <summary>
            The public XML 1.0 namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/2004/REC-xml-20040204/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNs">
            <summary>
            Public Xml Namespaces specification namespace. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.XmlNsPrefix">
            <summary>
            Public Xml Namespaces prefix. 
            </summary>
            <remarks>See http://www.w3.org/TR/REC-xml-names/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsi">
            <summary>
            XML Schema instance namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="F:Umbraco.Core.Xml.XmlNamespaces.Xsd">
            <summary>
            XML 1.0 Schema namespace.
            </summary>
            <remarks>See http://www.w3.org/TR/xmlschema-1/</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.CreateNodeList(System.Xml.XPath.XPathNodeIterator)">
            <summary>
            Creates an instance of a <see cref="T:System.Xml.XmlNodeList"/> that allows 
            enumerating <see cref="T:System.Xml.XmlNode"/> elements in the iterator.
            </summary>
            <param name="iterator">The result of a previous node selection 
            through an <see cref="T:System.Xml.XPath.XPathNavigator"/> query.</param>
            <returns>An initialized list ready to be enumerated.</returns>
            <remarks>The underlying XML store used to issue the query must be 
            an object inheriting <see cref="T:System.Xml.XmlNode"/>, such as 
            <see cref="T:System.Xml.XmlDocument"/>.</remarks>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadToEnd">
            <summary>
            Reads the entire iterator.
            </summary>
        </member>
        <member name="M:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.ReadTo(System.Int32)">
            <summary>
            Reads up to the specified index, or until the 
            iterator is consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.Done">
            <summary>
            Flags that the iterator has been consumed.
            </summary>
        </member>
        <member name="P:Umbraco.Core.Xml.XmlNodeListFactory.XmlNodeListIterator.CurrentPosition">
            <summary>
            Current count of nodes in the iterator (read so far).
            </summary>
        </member>
    </members>
</doc>
